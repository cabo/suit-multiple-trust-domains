<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="June" day="19"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT Manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
enables delegation of different rights to mutually distrusting entities
for use for different purposes or Components in the context of firmware
or software update.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying software updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>long-term Trust Anchors with a mechanism to delegate trust to short term keys.</t>
  <t>software Components from multiple software signing authorities.</t>
  <t>a mechanism to remove an unneeded Component</t>
  <t>single-object Dependencies</t>
  <t>a partly encrypted Manifest so that distribution does not reveal private information</t>
</list></t>

<t>These mechanisms are not part of the core Manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware/Software, configuration, or Resource data such as text or images.</t>
  <t>Resource: A piece of information that is used to construct a Payload.</t>
  <t>Manifest: A Manifest is a bundle of metadata about one or more Components for a device, where to
find them, and the devices to which they apply.</t>
  <t>Envelope: A container with the Manifest, an authentication wrapper with cryptographic information protecting the Manifest, authorization information, and severable elements (see Section 5.1 of <xref target="I-D.ietf-suit-manifest"/>).</t>
  <t>Update: One or more Manifests that describe one or more Payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign Updates, trusted by Recipients.</t>
  <t>Recipient: The system that receives and processes a Manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the Commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B Images: Dividing a Recipient's storage into two or more bootable Images, at different offsets, such that the active Image can write to the inactive Image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of Commands.</t>
  <t>Update Procedure: A Procedure that updates a Recipient by fetching Dependencies and Images, and installing them.</t>
  <t>Invocation Procedure: A Procedure in which a Recipient verifies Dependencies and Images, loading Images, and invokes one or more Image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically Firmware/Software, configuration, or Resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B Image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error Condition.</t>
  <t>Trust Anchor: A Trust Anchor, as defined in <xref target="RFC6024"/>, represents an
    authoritative entity via a public key and associated data.  The
    public key is used to verify digital signatures, and the
    associated data is used to constrain the types of information for
    which the Trust Anchor is authoritative.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All Dependency Manifests must be present before any Payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All Dependencies must be validated prior to loading.</t>
</list></t>

<t>Steps 1 and 4 are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t>Verify Delegation Chains.</t>
  <t>Verify the signature of the Manifest.</t>
  <t>Verify the applicability of the Manifest.</t>
  <t>Resolve Dependencies.</t>
  <t>Fetch Payload(s).</t>
  <t>Install Payload(s).</t>
</list></t>

<t>In addition, when multiple Manifests are used for an Update, each Manifest's steps occur in a lockstep fashion; all Manifests have Dependency resolution performed before any Manifest performs a Payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accommodate the additional metadata needed to enable these features, the Envelope and Manifest have several new elements added.</t>

<t>The Envelope gains two more elements: Delegation Chains and Integrated Dependencies. The Common metadata section in the Manifest also gains a list of Dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| CoSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="ovr-delegation"><name>Delegation Chains</name>

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a Manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Token (CWT). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (See Section 5.2 of <xref target="I-D.ietf-suit-manifest"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

<section anchor="delegation-info"><name>Delegation Chains</name>

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an intermediary knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A Dependency is another SUIT_Envelope that describes additional Components.</t>

<t>Dependency Manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios. For example:</t>

<t><list style="symbols">
  <t>A device may contain a processor in its radio in addition to the primary processor. These two processors may have separate Software with separate signing authorities. Dependencies allow the Software for the primary processor to reference a Manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of Update Payloads. The network operator overrides the URI of a Payload by providing a dependent Manifest that references the original Manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new Software version before releasing it. The configuration is delivered as a binary in the same way as a Software Image. The device operator references the Software Manifest from the Software author in their own Manifest which also defines the configuration.</t>
</list></t>

<t>By using Dependencies, Components such as Software, configuration, and other Resource data authenticated by different Trust Anchors can be delivered to devices.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling Dependencies. By default, any signature of a Dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different Components/Commands/Parameters), it MAY choose to skip signature verification of Dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of Dependencies until the list of affected Components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all Components specified in a Dependency, then that Dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the Dependency.</t>

<t>Components that should be treated as Dependency Manifests are identified in the suit-common metadata. See <xref target="structure-change"/> for details.</t>

<t>If the Manifest contains more than one Component and/or Dependency, each Command sequence MUST begin with a Set Component Index Command.</t>

<t>If a Dependency is specified, then the Manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each Dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support Dependencies and a Manifest specifies a Dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent Components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by a single Manifest and all its Dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a Payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent Manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

<section anchor="manifest-id"><name>Manifest Component ID</name>

<t>In complex systems, it may not always be clear where the Root Manifest should be stored; this is particularly complex when a system has multiple, independent Root Manifests. The Manifest Component ID resolves this contention. The manifest-component-id is intended to be used by the Root Manifest. When a Dependency Manifest also declares a Component ID, the Dependency Manifest's Component ID is overridden by the Component ID declared by the dependent.</t>

<t>The following CDDL describes the Manifest Component ID:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)
]]></sourcecode></figure>

</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>The suit-common section, as described in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.5 is extended with a map of Component indices that indicate a Dependency Manifest. The keys of the map are the Component indices and the values of the map are any extra metadata needed to describe those Dependency Manifests.</t>

<t>Because some operations treat Dependency Manifests differently from other Components, it is necessary to identify them. SUIT_Dependencies identifies which Components from suit-components (see Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as Dependency Manifest Envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a Component prefix or other metadata may be delivered with the Component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The Components specified by SUIT_Dependency will contain a Manifest Envelope that describes a Dependency of the current Manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the Dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a Component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a Dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the Dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a Manifest does not break Dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the Dependency operates. This allows the Dependency to be forwarded on to a Component that is capable of parsing its own Manifests. It also allows one Manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent Component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A Dependency prefix can be used with a Component identifier. This allows complex systems to understand where Dependencies need to be applied. The Dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the Dependency.</t>

<t>A Dependency prefix can also be used to indicate when a Dependency Manifest needs to be processed by a secondary Manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>.
With the addition of Dependencies, some changes are necessary to the abstract machine, outside the typical scope of added Commands. These changes alter the behaviour of an existing Command and way that the parser processes Manifests:</t>

<t><list style="symbols">
  <t>Three new Commands are introduced:  <list style="symbols">
      <t>Process Dependency</t>
      <t>Is Dependency</t>
      <t>Dependency Integrity</t>
    </list></t>
  <t>Dependency Manifests are also Components. All Commands may target Dependency Manifests as well as Components, with one exception: process Dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lockstep with the Root Manifest. This means that every Dependency's current Command sequence must be executed before a dependent's later Command sequence may be executed. For example, every Dependency's Dependency Resolution step MUST be executed before any dependent's Payload fetch step.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each Manifest must invoke each of its Dependencies' sections from the corresponding section of the dependent. Any changes made to Parameters by the Dependency persist in the dependent.</t>

<t>When a Process Dependency Command is encountered, the Manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of Dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Checks whether the Dependency has been the target of a Dependency integrity check. If not, it causes an immediate Abort.</t>
  <t>Loads the specified Component as a Dependency Manifest Envelope.</t>
  <t>Authenticates the Dependency Manifest.</t>
  <t>Executes the common-sequence section of the Dependency Manifest.</t>
  <t>Executes the section of the Dependency Manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified Dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the Dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple trust domains, each domain might require independent verification of authenticity or security policies. Trust domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another Trusted Execution Environment (TEE) technology. Trust domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more trust domains, a Manifest processor might be required in each. The first Manifest processor is the normal Manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second Manifest processor only executes sections when the first Manifest processor requests it. An API interface is provided from the second Manifest processor to the first. This allows the first Manifest processor to request a limited set of operations from the second. These operations are limited to: setting Parameters, inserting an Envelope, and invoking a Manifest Command Sequence. The second Manifest processor declares a prefix to the first, which tells the first Manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first Manifest processor encounters a Dependency prefix, that informs the first Manifest processor that it should provide the second Manifest processor with the corresponding Dependency Envelope. This is done when the Dependency is fetched. The second Manifest processor immediately verifies any authentication information in the Dependency Envelope. When a Parameter is set for any Component that matches the prefix, this Parameter setting is passed to the second Manifest processor via an API. As the first Manifest processor works through the Procedure (set of Command sequences) it is executing, each time it sees a Process Dependency Command that is associated with the prefix declared by the second Manifest processor, it uses the API to ask the second Manifest processor to invoke that Dependency section instead.</t>

<t>This mechanism ensures that the two or more Manifest processors do not need to trust each other, except in a very limited case. When Parameter setting across trust domains is used, it must be very carefully considered. Only Parameters that do not have an effect on security properties should be allowed. The Dependency Manifest MAY control which Parameters are allowed to be set by using the Override Parameters Directive. The second Manifest processor MAY also control which Parameters may be set by the first Manifest processor by means of an ACL that lists the allowed Parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the Manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the Commands needed to acquire and process the Dependencies of the current Manifest. All Dependency Manifests SHOULD be fetched before any Payload is fetched to ensure that all Manifests are available and authenticated before any of the (larger) Payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All Commands are modified in that they can also target Dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Dependency Integrity</c>
      <c>verify(current, current.params[image-digest])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in Dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similar to suit-directive-override-parameters, suit-directive-set-parameters allows the Manifest to configure behavior of future Directives by changing Parameters that are read by those Directives. Set Parameters is for use when Dependencies are used because it allows a Manifest to modify the behavior of its Dependencies.</t>

<t>Available Parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a Parameter is already set, suit-directive-set-parameters will skip setting the Parameter to its argument. This allows dependent Manifests to change the behavior of a Manifest, a Dependency that wishes to enforce a specific value of a Parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the Commands in the common section of the current Dependency, followed by the Commands in the equivalent section of the current Dependency. For example, if the current section is "fetch Payload," this will execute "common" in the current Dependency, then "fetch Payload" in the current Dependency. Once this is complete, the Command following suit-directive-process-dependency will be processed.</t>

<t>If the current Component index does not have an entry in the suit-dependencies map, then this Command MUST Abort.</t>

<t>If the current Component index has not been the target of a suit-condition-dependency-integrity, then this Command MUST Abort.</t>

<t>If the current Component is True, then this Directive applies to all Dependencies. If the current section is "common," then the Command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the Dependency.</t>

</section>
<section anchor="suit-condition-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether the current Component index is present in the Dependency list. If the current Component is in the Dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all Dependencies or on all non-Dependency Components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-condition-dependency-integrity"><name>suit-condition-dependency-integrity</name>

<t>Verify the integrity of a Dependency Manifest. When a Manifest Processor executes suit-condition-dependency-integrity, it performs the following operations:</t>

<t><list style="numbers">
  <t>Evaluate any Delegation Chains</t>
  <t>Verify the signature of the Manifest hash</t>
  <t>Compare the Manifest hash to the provided hash</t>
  <t>Verify the Manifest against the Manifest hash</t>
</list></t>

<t>If any of these steps fails, the Manifest Process MUST immediately Abort.</t>

<t>The Manifest Processor MAY cache the results of these operations for later use from the context of the current Manifest. The Manifest Processor MUST NOT use cached results from any other Manifest context. If the Manifest Processor caches the results of these checks, it MUST eliminate this cache if any Fetch, or Copy operation targets the Dependency Manifest's Component ID.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>suit-directive-unlink applies to Manifests. When the Components defined by a Manifest are no longer needed, the Manifest processor unlinks the Manifest to inform the Manifest processor that they are no longer needed. The unlink Command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given Manifest more than once, and the Manifest processor must enforce this. The Manifest processor MAY choose to ignore a Unlink Directive depending on device policy.</t>

<t>When the reference counter reaches zero, the suit-uninstall Command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in Manifest processors.</t>

</section>
</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional Components, it may be that there is a need to uninstall the Components that have been installed by a Manifest. Where this is expected, the uninstall Command sequence can provide the sequence needed to cleanly remove the Components defined by the Manifest and its Dependencies. In general, the suit-uninstall Command Sequence will contain primarily unlink Directives.</t>

<t>WARNING: This can cause faults where there are loose Dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a Component can be removed while it is depended upon by another Component. To avoid Dependency faults, a Manifest author MAY use explicit Dependencies where possible, or a Manifest processor MAY track references to loose Dependencies via reference counting in the same way as explicit Dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The suit-uninstall Command Sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating Manifests. These templates explain which Parameters, Commands, and orders of Commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a Dependency Manifest as appropriate.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following Commands are placed into the Dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any Dependency is declared, the dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to Parameters in a Dependency persist in the dependent.</t>

<section anchor="composite-manifests"><name>Composite Manifests</name>

<t>An implementer MAY choose to place a Dependency's Envelope in the Envelope of its dependent. The dependent Envelope key for the Dependency Envelope MUST be a text string. The URI for the Dependency MUST match the text string key of the dependent's Envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a Dependency Manifest that is removed from the Envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a Manifest so that it can be used as a Dependency. To use an encrypted Manifest, create a plaintext dependent, and add the encrypted Manifest as a Dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match Condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext Manifest and its encrypted Dependency may also form a composite Manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple Components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-dependency. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all Dependency Manifests, the following Commands are added to the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Fetch</t>
          <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no Commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The Image fetch sequence contains the following Commands:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some Components are "installed" or "loaded" it is more productive to use lists of Component indices rather than Component Index = True. For example, to install several Components, the following Commands should be placed in the Image Install Sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for the Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument containing list of destination Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index Directive, with argument containing list Dependency Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Delegation</c>
      <c><xref target="ovr-delegation"/></c>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>5</c>
      <c>Manifest Component ID</c>
      <c><xref target="manifest-id"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Dependencies</c>
      <c><xref target="SUIT_Dependencies"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Integrity</c>
      <c><xref target="suit-condition-dependency-integrity"/></c>
      <c>8</c>
      <c>Is Dependency</c>
      <c><xref target="suit-condition-is-dependency"/></c>
      <c>11</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a Manifest format protecting and describing how to retrieve, install, and invoke Images and as such it is part of a larger solution for delivering software updates to devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC6024'>
<front>
<title>Trust Anchor Management Requirements</title>
<author fullname='R. Reddy' initials='R.' surname='Reddy'><organization/></author>
<author fullname='C. Wallace' initials='C.' surname='Wallace'><organization/></author>
<date month='October' year='2010'/>
<abstract><t>A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6024'/>
<seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>



<reference anchor='RFC7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor='RFC8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference anchor='RFC8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='L. Seitz' initials='L.' surname='Seitz'><organization/></author>
<author fullname='G. Selander' initials='G.' surname='Selander'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='March' year='2020'/>
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor='RFC9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='27' month='February' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-22'/>
   
</reference>



<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='27' month='April' year='2023'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-02'/>
   
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='13' month='April' year='2023'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   agreement is provided by ephemeral-static (ES) Diffie-Hellman (DH)
   and AES Key Wrap (AES-KW).  ES-DH uses public key cryptography while
   AES-KW uses a pre-shared key-encryption key.  Encryption of the
   plaintext is accomplished with conventional symmetric key
   cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-12'/>
   
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-19'/>
   
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution =>
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-dependency-integrity, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-manifest-component-id = 5

suit-delegation = 1
suit-dependency-resolution = 15
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-dependency-integrity     = 7
suit-condition-is-dependency            = 8
suit-directive-process-dependency       = 11
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionalities in this document.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-delegation-chain"><name>Example 0: Delegation Chain</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>delegation chain</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / delegation / 1: << [
    [
      / NOTE: signed by trust anchor /
      << 18([
        / protected: / << {
          / alg / 1: -7 / ES256 /
        } >>,
        / unprotected / {
        },
        / payload: / << {
          / cnf / 8: {
            / NOTE: public key of delegated authority /
            / COSE_Key / 1: {
              / cty / 1: 2 / EC2 /,
              / crv / -1: 1 / P-256 /,
              / x / -2:
                h'0E908AA8F066DB1F084E0C3652C63952
                  BD99F2A5BDB22F9E01367AAD03ABA68B',
              / y / -3:
                h'77DA1BD8AC4F0CB490BA210648BF79AB
                  164D49AD3551D71D314B2749EE42D29A'
            }
          }
        } >>,
        / signature: /
          h'FB2D5ACF66B9C8573CE92E13BFB8D113F798715CC10B5A0010B11925C155E724
            5A64E131073B87AC50CAC71650A21315B82D06CA2298CD1A95519AAE4C4B5315'
      ]) >>
    ]
  ] >>,
  / NOTE: signed by delegated authority /
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'6EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'99F949043701D7BDBA38904A0B49F004DED6B64A4900DECA5C66AE8A9EBA9135
          76DEF136B74EA89C14FA64624DBD33B4C0BB41C153CA51548C73FF71A2BAF274'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / components / 2: [
        [
          '00'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent.suit'
    ],
    / invoke / 9: << [
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00'
      },
      / directive-invoke / 23, 15
    ] >>,
    / install / 17: << [
      / directive-override-parameters / 20, {
        / parameter-content / 18: 'hello world'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  352</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA301589E8181589AD28443A10126A0584FA108A101A4010220012158
200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03
ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D
314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715C
C10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B82D
06CA2298CD1A95519AAE4C4B5315025874835824822F58206EA128D7BB19
B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51584AD284
43A10126A0F6584099F949043701D7BDBA38904A0B49F004DED6B64A4900
DECA5C66AE8A9EBA913576DEF136B74EA89C14FA64624DBD33B4C0BB41C1
53CA51548C73FF71A2BAF27440035842A6010102000347A1028181423030
05814E646570656E64656E742E73756974094D8414A11746636174203030
170F11528414A1124B68656C6C6F20776F726C64120F
]]></artwork></figure>

</section>
<section anchor="example-1-process-dependency"><name>Example 1: Process Dependency</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'4874ADC80A9128A2B2057F5FE59C45F8ED10A9BF9C5308FCF951B8BBAF434B95'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'C257E23A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD2209886889
          1DF42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B916'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "http://example.com/dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51'
        ] >>
      },
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  374</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F58204874ADC80A9128A2B2057F5FE59C45F8ED
10A9BF9C5308FCF951B8BBAF434B95584AD28443A10126A0F65840C257E2
3A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD22098868891D
F42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B9
160358FAA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5858880C0114A3035824822F
58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
DB23E7680E190160157821687474703A2F2F6578616D706C652E636F6D2F
646570656E64656E742E737569741502030F1158538E0C0114A103582482
2F58206EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA3
88B13E2F51070F0B000C0014A112581A20696E206D756C7469706C652074
7275737420646F6D61696E73120F
]]></artwork></figure>

</section>
<section anchor="example-2-integrated-dependency"><name>Example 2: Integrated Dependency</name>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
  <t>integrated dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'318EAD5F671A6D2593D7ADB7B6CCADC49F72704507004F297A25AF16A48A2111'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'287D5AAB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C99
          50D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627DC3'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "#dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>,
  / NOTE: Example 0 /
  "#dependent.suit":
    h'D86BA301589E8181589AD28443A10126A0584FA108A101A4010220012158200E
      908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03ABA68B22
      582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D314B2749EE42
      D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715CC10B5A0010B11925
      C155E7245A64E131073B87AC50CAC71650A21315B82D06CA2298CD1A95519AAE
      4C4B5315025874835824822F58206EA128D7BB19B86F77C4227F2A29F22026A4
      1958ACC45CC0A35BA388B13E2F51584AD28443A10126A0F6584099F949043701
      D7BDBA38904A0B49F004DED6B64A4900DECA5C66AE8A9EBA913576DEF136B74E
      A89C14FA64624DBD33B4C0BB41C153CA51548C73FF71A2BAF27440035842A601
      0102000347A102818142303005814E646570656E64656E742E73756974094D84
      14A11746636174203030170F11528414A1124B68656C6C6F20776F726C64120F'
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  683</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA3025873825824822F5820318EAD5F671A6D2593D7ADB7B6CCADC49F
72704507004F297A25AF16A48A2111584AD28443A10126A0F65840287D5A
AB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C9950
D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627D
C30358BCA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5845880C0114A3035824822F
58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
DB23E7680E190160156F23646570656E64656E742E737569741502030F11
58288A0C010B000C0014A112581A20696E206D756C7469706C6520747275
737420646F6D61696E73120F6F23646570656E64656E742E737569745901
60D86BA301589E8181589AD28443A10126A0584FA108A101A40102200121
58200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD
03ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D7
1D314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F79871
5CC10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B8
2D06CA2298CD1A95519AAE4C4B5315025874835824822F58206EA128D7BB
19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51584AD2
8443A10126A0F6584099F949043701D7BDBA38904A0B49F004DED6B64A49
00DECA5C66AE8A9EBA913576DEF136B74EA89C14FA64624DBD33B4C0BB41
C153CA51548C73FF71A2BAF27440035842A6010102000347A10281814230
3005814E646570656E64656E742E73756974094D8414A117466361742030
30170F11528414A1124B68656C6C6F20776F726C64120F
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
SDaRY1NWQ5lOsGdk+Uh96h+9BcDsZcZ0Pa1r3k8r+eGeC6eN1909/QNdaeme
zGdJKi/GlE+PD41p3HobqdeymrSJjv6KKeR4oMoXpgRV5wf3c/rP6ITvrPvR
/dFx8MNTHsN+r+Breq+g83e+dVsOrxIx6quQBFXxOmAL2BXioQooglu+lroX
TbeJjbnkinnSPXPqVJKHzXPoBN0cxsDl7FxMVp/fJEDKD7kXuQAIpYMfWqh7
ajq39Wn8i9/I/NmhO5kd0V/aL4XdH8r+pt6vwvXrrykP8vjBw1lytGIcARSl
2RdPZY9U3bWqwmB7JWyNpnr/uQSfls731aNVLY2FcNXm9jERtyMzO03G5jn7
6MD1Ok6ReN1m23EqUBiGKo0l0Uk9O1CTgD9P3V6xrV2dYfw8dfvFbNWK8iXZ
1vMO1LaZA3uDHXmw5Z+nbqvlyLcJD/EeL7KG0cwQhrF8t4EWzPIByFfgE3jb
JMVOsxWZzvhyXZV9f7WJ55zvyq/xikSJkVQVRMxLjUivcOFLhnTdvp55Mhpf
+KjQrJudbuph3JsvlHeopng4+eL8hfv1q/Nv/cuJ+9Xke/rWeX7+xZf+9cR/
Pnz+xXD78xcXz9sD+PuL0Uh8vpt8OfyicRfcnQ/9P/3p2l//5fuf/jL65otn
zzuNb4cjZ/TT9xf5nz9vDH76YhVv//h1uh4/u3x3ehP9+eXNK//FyPcvJstk
ghbjzz8P/njz7dso7L1IVrc///ys/yq/db7+fBbl3303v1nc+ulldvXVmzwb
fT95e/fVizx98eWfo8HLYevF53ex/02evVu9araet/Ovou94W5MX4/Km6Mgu
b4pXnpjvK658o7BwsAuAV0Dvm+Gz85EBvOmbu8nd919+lfzl/N1PjZH/p+/P
xeex/6f5GMA1ufljMPzi5/azn3++vfj+2/n38eZd8Me0+3N0Opk5s3enq3b6
7TI+//Ps7qtG78vt+tnMXw2fz0c/zYJ3r7z27eX14t1V9se76bPZ886bRf7u
5bOLZHn99Kmx/8KyaPvk9ZI+S7rD4+JLHzBDXrUtAroSCUXygmjfOCsV3Ajt
3xqxgMF0dankUrpiyo0W8L35PmseD5d5autory+Da3zL8KnrNXpHKMxOzY7w
9Zn7+9+7PxD3/EEI81OXEwSMl1PTtR0Bv4r7VDSDfl7/6AelAZxKKyVcnMEf
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

-->

</rfc>

