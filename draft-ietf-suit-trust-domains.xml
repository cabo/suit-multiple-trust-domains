<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-04" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="July" day="07"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT Manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
enables delegation of different rights to mutually distrusting entities
for use for different purposes or Components in the context of firmware
or software update.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying software updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>long-term Trust Anchors with a mechanism to delegate trust to short term keys.</t>
  <t>software Components from multiple software signing authorities.</t>
  <t>a mechanism to remove an unneeded Component</t>
  <t>single-object Dependencies</t>
  <t>a partly encrypted Manifest so that distribution does not reveal private information</t>
</list></t>

<t>These mechanisms are not part of the core Manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware/Software, configuration, or Resource data such as text or images.</t>
  <t>Resource: A piece of information that is used to construct a Payload.</t>
  <t>Manifest: A Manifest is a bundle of metadata about one or more Components for a device, where to
find them, and the devices to which they apply.</t>
  <t>Envelope: A container with the Manifest, an authentication wrapper with cryptographic information protecting the Manifest, authorization information, and severable elements (see Section 5.1 of <xref target="I-D.ietf-suit-manifest"/>).</t>
  <t>Update: One or more Manifests that describe one or more Payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign Updates, trusted by Recipients.</t>
  <t>Recipient: The system that receives and processes a Manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the Commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B Images: Dividing a Recipient's storage into two or more bootable Images, at different offsets, such that the active Image can write to the inactive Image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of Commands.</t>
  <t>Update Procedure: A Procedure that updates a Recipient by fetching Dependencies and Images, and installing them.</t>
  <t>Invocation Procedure: A Procedure in which a Recipient verifies Dependencies and Images, loading Images, and invokes one or more Image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically Firmware/Software, configuration, or Resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B Image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error Condition.</t>
  <t>Trust Anchor: A Trust Anchor, as defined in <xref target="RFC6024"/>, represents an
    authoritative entity via a public key and associated data.  The
    public key is used to verify digital signatures, and the
    associated data is used to constrain the types of information for
    which the Trust Anchor is authoritative.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All Dependency Manifests must be present before any Payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All Dependencies must be validated prior to loading.</t>
</list></t>

<t>Steps 1 and 4 are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t>Verify Delegation Chains.</t>
  <t>Verify the signature of the Manifest.</t>
  <t>Verify the applicability of the Manifest.</t>
  <t>Resolve Dependencies.</t>
  <t>Fetch Payload(s).</t>
  <t>Install Payload(s).</t>
</list></t>

<t>In addition, when multiple Manifests are used for an Update, each Manifest's steps occur in a lockstep fashion; all Manifests have Dependency resolution performed before any Manifest performs a Payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accommodate the additional metadata needed to enable these features, the Envelope and Manifest have several new elements added.</t>

<t>The Envelope gains two more elements: Delegation Chains and Integrated Dependencies. The Common metadata section in the Manifest also gains a list of Dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| CoSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="ovr-delegation"><name>Delegation Chains</name>

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a Manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Token (CWT). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (See Section 5.2 of <xref target="I-D.ietf-suit-manifest"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

<section anchor="delegation-info"><name>Delegation Chains</name>

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an intermediary knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A Dependency is another SUIT_Envelope that describes additional Components.</t>

<t>Dependency Manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios. For example:</t>

<t><list style="symbols">
  <t>A device may contain a processor in its radio in addition to the primary processor. These two processors may have separate Software with separate signing authorities. Dependencies allow the Software for the primary processor to reference a Manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of Update Payloads. The network operator overrides the URI of a Payload by providing a dependent Manifest that references the original Manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new Software version before releasing it. The configuration is delivered as a binary in the same way as a Software Image. The device operator references the Software Manifest from the Software author in their own Manifest which also defines the configuration.</t>
</list></t>

<t>By using Dependencies, Components such as Software, configuration, and other Resource data authenticated by different Trust Anchors can be delivered to devices.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling Dependencies. By default, any signature of a Dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different Components/Commands/Parameters), it MAY choose to skip signature verification of Dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of Dependencies until the list of affected Components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all Components specified in a Dependency, then that Dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the Dependency.</t>

<t>Components that should be treated as Dependency Manifests are identified in the suit-common metadata. See <xref target="structure-change"/> for details.</t>

<t>If the Manifest contains more than one Component and/or Dependency, each Command sequence MUST begin with a Set Component Index Command.</t>

<t>If a Dependency is specified, then the Manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each Dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support Dependencies and a Manifest specifies a Dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent Components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by a single Manifest and all its Dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a Payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent Manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

<section anchor="manifest-id"><name>Manifest Component ID</name>

<t>In complex systems, it may not always be clear where the Root Manifest should be stored; this is particularly complex when a system has multiple, independent Root Manifests. The Manifest Component ID resolves this contention. The manifest-component-id is intended to be used by the Root Manifest. When a Dependency Manifest also declares a Component ID, the Dependency Manifest's Component ID is overridden by the Component ID declared by the dependent.</t>

<t>The following CDDL describes the Manifest Component ID:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)
]]></sourcecode></figure>

</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>The suit-common section, as described in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.5 is extended with a map of Component indices that indicate a Dependency Manifest. The keys of the map are the Component indices and the values of the map are any extra metadata needed to describe those Dependency Manifests.</t>

<t>Because some operations treat Dependency Manifests differently from other Components, it is necessary to identify them. SUIT_Dependencies identifies which Components from suit-components (see Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as Dependency Manifest Envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a Component prefix or other metadata may be delivered with the Component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The Components specified by SUIT_Dependency will contain a Manifest Envelope that describes a Dependency of the current Manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the Dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a Component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a Dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the Dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a Manifest does not break Dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the Dependency operates. This allows the Dependency to be forwarded on to a Component that is capable of parsing its own Manifests. It also allows one Manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent Component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A Dependency prefix can be used with a Component identifier. This allows complex systems to understand where Dependencies need to be applied. The Dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the Dependency.</t>

<t>A Dependency prefix can also be used to indicate when a Dependency Manifest needs to be processed by a secondary Manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>.
With the addition of Dependencies, some changes are necessary to the abstract machine, outside the typical scope of added Commands. These changes alter the behaviour of an existing Command and way that the parser processes Manifests:</t>

<t><list style="symbols">
  <t>Five new Commands are introduced:  <list style="symbols">
      <t>Set Parameters</t>
      <t>Process Dependency</t>
      <t>Is Dependency</t>
      <t>Dependency Integrity</t>
      <t>Unlink</t>
    </list></t>
  <t>Dependency Manifests are also Components. All Commands may target Dependency Manifests as well as Components, with one exception: process Dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lockstep with the Root Manifest. This means that every Dependency's current Command sequence must be executed before a dependent's later Command sequence may be executed. For example, every Dependency's Dependency Resolution step MUST be executed before any dependent's Payload fetch step.</t>
  <t>When a Manifest Processor supports multiple independent Components, they MAY have shared Dependencies.</t>
  <t>When a Manifest Processor supports shared Dependencies, it MUST support reference counting of those Dependencies.</t>
  <t>When reference counting is used, Components MUST NOT be overwritten. The Manifest Uninstall section must be called, then the component MUST be Unlinked.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each Manifest must invoke each of its Dependencies' sections from the corresponding section of the dependent. Any changes made to Parameters by the Dependency persist in the dependent.</t>

<t>When a Process Dependency Command is encountered, the Manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of Dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Checks whether the Dependency has been the target of a Dependency integrity check. If not, it causes an immediate Abort.</t>
  <t>Loads the specified Component as a Dependency Manifest Envelope.</t>
  <t>Authenticates the Dependency Manifest.</t>
  <t>Executes the common-sequence section of the Dependency Manifest.</t>
  <t>Executes the section of the Dependency Manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified Dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the Dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple trust domains, each domain might require independent verification of authenticity or security policies. Trust domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another Trusted Execution Environment (TEE) technology. Trust domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more trust domains, a Manifest processor might be required in each. The first Manifest processor is the normal Manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second Manifest processor only executes sections when the first Manifest processor requests it. An API interface is provided from the second Manifest processor to the first. This allows the first Manifest processor to request a limited set of operations from the second. These operations are limited to: setting Parameters, inserting an Envelope, and invoking a Manifest Command Sequence. The second Manifest processor declares a prefix to the first, which tells the first Manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first Manifest processor encounters a Dependency prefix, that informs the first Manifest processor that it should provide the second Manifest processor with the corresponding Dependency Envelope. This is done when the Dependency is fetched. The second Manifest processor immediately verifies any authentication information in the Dependency Envelope. When a Parameter is set for any Component that matches the prefix, this Parameter setting is passed to the second Manifest processor via an API. As the first Manifest processor works through the Procedure (set of Command sequences) it is executing, each time it sees a Process Dependency Command that is associated with the prefix declared by the second Manifest processor, it uses the API to ask the second Manifest processor to invoke that Dependency section instead.</t>

<t>This mechanism ensures that the two or more Manifest processors do not need to trust each other, except in a very limited case. When Parameter setting across trust domains is used, it must be very carefully considered. Only Parameters that do not have an effect on security properties should be allowed. The Dependency Manifest MAY control which Parameters are allowed to be set by using the Override Parameters Directive. The second Manifest processor MAY also control which Parameters may be set by the first Manifest processor by means of an ACL that lists the allowed Parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the Manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the Commands needed to acquire and process the Dependencies of the current Manifest. All Dependency Manifests SHOULD be fetched before any Payload is fetched to ensure that all Manifests are available and authenticated before any of the (larger) Payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All Commands are modified in that they can also target Dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Dependency Integrity</c>
      <c>verify(current, current.params[image-digest])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in Dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similar to suit-directive-override-parameters, suit-directive-set-parameters allows the Manifest to configure behavior of future Directives by changing Parameters that are read by those Directives. Set Parameters is for use when Dependencies are used because it allows a Manifest to modify the behavior of its Dependencies.</t>

<t>Available Parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a Parameter is already set, suit-directive-set-parameters will skip setting the Parameter to its argument. This allows dependent Manifests to change the behavior of a Manifest, a Dependency that wishes to enforce a specific value of a Parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the Commands in the common section of the current Dependency, followed by the Commands in the equivalent section of the current Dependency. For example, if the current section is "Payload Fetch," this will execute "Common metadata" in the current Dependency, then "Payload Fetch" in the current Dependency. Once this is complete, the Command following suit-directive-process-dependency will be processed.</t>

<t>If the current Component index does not have an entry in the suit-dependencies map, then this Command MUST Abort.</t>

<t>If the current Component index has not been the target of a suit-condition-dependency-integrity, then this Command MUST Abort.</t>

<t>If the current Component is True, then this Directive applies to all Dependencies. If the current section is "Common metadata," then the Command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the Dependency.</t>

</section>
<section anchor="suit-condition-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether the current Component index is present in the Dependency list. If the current Component is in the Dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all Dependencies or on all non-Dependency Components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-condition-dependency-integrity"><name>suit-condition-dependency-integrity</name>

<t>Verify the integrity of a Dependency Manifest. When a Manifest Processor executes suit-condition-dependency-integrity, it performs the following operations:</t>

<t><list style="numbers">
  <t>Evaluate any Delegation Chains</t>
  <t>Verify the signature of the Manifest hash</t>
  <t>Compare the Manifest hash to the provided hash</t>
  <t>Verify the Manifest against the Manifest hash</t>
</list></t>

<t>If any of these steps fails, the Manifest Process MUST immediately Abort.</t>

<t>The Manifest Processor MAY cache the results of these operations for later use from the context of the current Manifest. The Manifest Processor MUST NOT use cached results from any other Manifest context. If the Manifest Processor caches the results of these checks, it MUST eliminate this cache if any Fetch, or Copy operation targets the Dependency Manifest's Component ID.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>A manifest processor that supports multiple independent root manifests
MUST support suit-directive-unlink. When a Component is no longer
needed, the Manifest processor unlinks the Component to inform the 
Manifest processor that it is no longer needed.</t>

<t>If a Manifest is no longer needed, the Manifest Processor unlinks it.
This causes the Manifest Processor to execute the suit-uninstall section
of the unlinked Manifest, after which it decrements the reference count
of the unlinked Manifest. The suit-uninstall section of a manifest
typically contains an unlink of all its dependencies and components.</t>

<t>All components, including Manifests must be unlinked before deletion 
or overwrite. If the
reference count of a component is non-zero, any command that alters
that component MUST cause an immediate ABORT. Affected commands are:</t>

<t><list style="symbols">
  <t>suit-directive-copy</t>
  <t>suit-directive-fetch</t>
  <t>suit-directive-write</t>
</list></t>

<t>The unlink Command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given Manifest more than once, and the Manifest processor must enforce this. The Manifest processor MAY choose to ignore an Unlink Directive depending on device policy.</t>

<t>When the reference counter of a Manifest reaches zero, the suit-uninstall Command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in Manifest processors,
but Manifest processors that support multiple independent Root Manifests
MUST support suit-directive-unlink.</t>

</section>
</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional Components, it may be that there is a need to uninstall the Components that have been installed by a Manifest. Where this is expected, the uninstall Command sequence can provide the sequence needed to cleanly remove the Components defined by the Manifest and its Dependencies. In general, the suit-uninstall Command Sequence will contain primarily unlink Directives.</t>

<t>WARNING: This can cause faults where there are loose Dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a Component can be removed while it is depended upon by another Component. To avoid Dependency faults, a Manifest author MAY use explicit Dependencies where possible, or a Manifest processor MAY track references to loose Dependencies via reference counting in the same way as explicit Dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The suit-uninstall Command Sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating Manifests. These templates explain which Parameters, Commands, and orders of Commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a Dependency Manifest as appropriate.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following Commands are placed into the Dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any Dependency is declared, the dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to Parameters in a Dependency persist in the dependent.</t>

<section anchor="integrated-dependencies"><name>Integrated Dependencies</name>

<t>An implementer MAY choose to place a Dependency's Envelope in the Envelope of its dependent. The dependent Envelope key for the Dependency Envelope MUST be a text string. The URI for the Dependency MUST match the text string key of the dependent's Envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a Dependency Manifest that is removed from the Envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a Manifest so that it can be used as a Dependency. To use an encrypted Manifest, create a plaintext dependent, and add the encrypted Manifest as a Dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match Condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext Manifest and its encrypted Dependency may also form a composite Manifest (<xref target="integrated-dependencies"/>).</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple Components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-dependency. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all Dependency Manifests, the following Commands are added to the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Fetch</t>
          <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no Commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The Image fetch sequence contains the following Commands:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some Components are "installed" or "loaded" it is more productive to use lists of Component indices rather than Component Index = True. For example, to install several Components, the following Commands should be placed in the Image Install Sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for the Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument containing list of destination Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index Directive, with argument containing list Dependency Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Delegation</c>
      <c><xref target="ovr-delegation"/></c>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>5</c>
      <c>Manifest Component ID</c>
      <c><xref target="manifest-id"/></c>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Dependencies</c>
      <c><xref target="SUIT_Dependencies"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Integrity</c>
      <c><xref target="suit-condition-dependency-integrity"/></c>
      <c>8</c>
      <c>Is Dependency</c>
      <c><xref target="suit-condition-is-dependency"/></c>
      <c>11</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a Manifest format protecting and describing how to retrieve, install, and invoke Images and as such it is part of a larger solution for delivering software updates to devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor='RFC3986'>
  <front>
    <title>Uniform Resource Identifier (URI): Generic Syntax</title>
    <author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'/>
    <author fullname='R. Fielding' initials='R.' surname='Fielding'/>
    <author fullname='L. Masinter' initials='L.' surname='Masinter'/>
    <date month='January' year='2005'/>
    <abstract>
      <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='66'/>
  <seriesInfo name='RFC' value='3986'/>
  <seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>

<reference anchor='RFC6024'>
  <front>
    <title>Trust Anchor Management Requirements</title>
    <author fullname='R. Reddy' initials='R.' surname='Reddy'/>
    <author fullname='C. Wallace' initials='C.' surname='Wallace'/>
    <date month='October' year='2010'/>
    <abstract>
      <t>A trust anchor represents an authoritative entity via a public key and associated data. The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative. A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor. This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='6024'/>
  <seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>

<reference anchor='RFC7228'>
  <front>
    <title>Terminology for Constrained-Node Networks</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='M. Ersue' initials='M.' surname='Ersue'/>
    <author fullname='A. Keranen' initials='A.' surname='Keranen'/>
    <date month='May' year='2014'/>
    <abstract>
      <t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='7228'/>
  <seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>

<reference anchor='RFC8392'>
  <front>
    <title>CBOR Web Token (CWT)</title>
    <author fullname='M. Jones' initials='M.' surname='Jones'/>
    <author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'/>
    <author fullname='S. Erdtman' initials='S.' surname='Erdtman'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <date month='May' year='2018'/>
    <abstract>
      <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8392'/>
  <seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>

<reference anchor='RFC8747'>
  <front>
    <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
    <author fullname='M. Jones' initials='M.' surname='Jones'/>
    <author fullname='L. Seitz' initials='L.' surname='Seitz'/>
    <author fullname='G. Selander' initials='G.' surname='Selander'/>
    <author fullname='S. Erdtman' initials='S.' surname='Erdtman'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <date month='March' year='2020'/>
    <abstract>
      <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8747'/>
  <seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>

<reference anchor='RFC9019'>
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Brown' initials='D.' surname='Brown'/>
    <author fullname='M. Meriac' initials='M.' surname='Meriac'/>
    <date month='April' year='2021'/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9019'/>
  <seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>

<reference anchor='RFC9124'>
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <date month='January' year='2022'/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9124'/>
  <seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='27' month='February' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-22'/>
   
</reference>

<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='27' month='April' year='2023'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-02'/>
   
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='13' month='April' year='2023'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   agreement is provided by ephemeral-static (ES) Diffie-Hellman (DH)
   and AES Key Wrap (AES-KW).  ES-DH uses public key cryptography while
   AES-KW uses a pre-shared key-encryption key.  Encryption of the
   plaintext is accomplished with conventional symmetric key
   cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-12'/>
   
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-19'/>
   
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution =>
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-dependency-integrity, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-manifest-component-id = 5

suit-delegation = 1
suit-dependency-resolution = 15
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-dependency-integrity     = 7
suit-condition-is-dependency            = 8
suit-directive-process-dependency       = 11
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionalities in this document.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-delegation-chain"><name>Example 0: Delegation Chain</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>delegation chain</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / delegation / 1: << [
    [
      / NOTE: signed by trust anchor /
      << 18([
        / protected: / << {
          / alg / 1: -7 / ES256 /
        } >>,
        / unprotected / {
        },
        / payload: / << {
          / cnf / 8: {
            / NOTE: public key of delegated authority /
            / COSE_Key / 1: {
              / cty / 1: 2 / EC2 /,
              / crv / -1: 1 / P-256 /,
              / x / -2:
                h'0E908AA8F066DB1F084E0C3652C63952
                  BD99F2A5BDB22F9E01367AAD03ABA68B',
              / y / -3:
                h'77DA1BD8AC4F0CB490BA210648BF79AB
                  164D49AD3551D71D314B2749EE42D29A'
            }
          }
        } >>,
        / signature: /
          h'FB2D5ACF66B9C8573CE92E13BFB8D113F798715CC10B5A0010B11925C155E724
            5A64E131073B87AC50CAC71650A21315B82D06CA2298CD1A95519AAE4C4B5315'
      ]) >>
    ]
  ] >>,
  / NOTE: signed by delegated authority /
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'6EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'99F949043701D7BDBA38904A0B49F004DED6B64A4900DECA5C66AE8A9EBA9135
          76DEF136B74EA89C14FA64624DBD33B4C0BB41C153CA51548C73FF71A2BAF274'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / components / 2: [
        [
          '00'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent.suit'
    ],
    / invoke / 9: << [
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00'
      },
      / directive-invoke / 23, 15
    ] >>,
    / install / 17: << [
      / directive-override-parameters / 20, {
        / parameter-content / 18: 'hello world'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  352</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA301589E8181589AD28443A10126A0584FA108A101A4010220012158
200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03
ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D
314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715C
C10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B82D
06CA2298CD1A95519AAE4C4B5315025874835824822F58206EA128D7BB19
B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51584AD284
43A10126A0F6584099F949043701D7BDBA38904A0B49F004DED6B64A4900
DECA5C66AE8A9EBA913576DEF136B74EA89C14FA64624DBD33B4C0BB41C1
53CA51548C73FF71A2BAF27440035842A6010102000347A1028181423030
05814E646570656E64656E742E73756974094D8414A11746636174203030
170F11528414A1124B68656C6C6F20776F726C64120F
]]></artwork></figure>

</section>
<section anchor="example-1-process-dependency"><name>Example 1: Process Dependency</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'4874ADC80A9128A2B2057F5FE59C45F8ED10A9BF9C5308FCF951B8BBAF434B95'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'C257E23A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD2209886889
          1DF42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B916'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "http://example.com/dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51'
        ] >>
      },
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  374</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F58204874ADC80A9128A2B2057F5FE59C45F8ED
10A9BF9C5308FCF951B8BBAF434B95584AD28443A10126A0F65840C257E2
3A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD22098868891D
F42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B9
160358FAA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5858880C0114A3035824822F
58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
DB23E7680E190160157821687474703A2F2F6578616D706C652E636F6D2F
646570656E64656E742E737569741502030F1158538E0C0114A103582482
2F58206EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA3
88B13E2F51070F0B000C0014A112581A20696E206D756C7469706C652074
7275737420646F6D61696E73120F
]]></artwork></figure>

</section>
<section anchor="example-2-integrated-dependency"><name>Example 2: Integrated Dependency</name>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
  <t>integrated dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'318EAD5F671A6D2593D7ADB7B6CCADC49F72704507004F297A25AF16A48A2111'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'287D5AAB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C99
          50D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627DC3'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "#dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>,
  / NOTE: Example 0 /
  "#dependent.suit":
    h'D86BA301589E8181589AD28443A10126A0584FA108A101A4010220012158200E
      908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03ABA68B22
      582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D314B2749EE42
      D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715CC10B5A0010B11925
      C155E7245A64E131073B87AC50CAC71650A21315B82D06CA2298CD1A95519AAE
      4C4B5315025874835824822F58206EA128D7BB19B86F77C4227F2A29F22026A4
      1958ACC45CC0A35BA388B13E2F51584AD28443A10126A0F6584099F949043701
      D7BDBA38904A0B49F004DED6B64A4900DECA5C66AE8A9EBA913576DEF136B74E
      A89C14FA64624DBD33B4C0BB41C153CA51548C73FF71A2BAF27440035842A601
      0102000347A102818142303005814E646570656E64656E742E73756974094D84
      14A11746636174203030170F11528414A1124B68656C6C6F20776F726C64120F'
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  683</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA3025873825824822F5820318EAD5F671A6D2593D7ADB7B6CCADC49F
72704507004F297A25AF16A48A2111584AD28443A10126A0F65840287D5A
AB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C9950
D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627D
C30358BCA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5845880C0114A3035824822F
58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
DB23E7680E190160156F23646570656E64656E742E737569741502030F11
58288A0C010B000C0014A112581A20696E206D756C7469706C6520747275
737420646F6D61696E73120F6F23646570656E64656E742E737569745901
60D86BA301589E8181589AD28443A10126A0584FA108A101A40102200121
58200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD
03ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D7
1D314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F79871
5CC10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B8
2D06CA2298CD1A95519AAE4C4B5315025874835824822F58206EA128D7BB
19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51584AD2
8443A10126A0F6584099F949043701D7BDBA38904A0B49F004DED6B64A49
00DECA5C66AE8A9EBA913576DEF136B74EA89C14FA64624DBD33B4C0BB41
C153CA51548C73FF71A2BAF27440035842A6010102000347A10281814230
3005814E646570656E64656E742E73756974094D8414A117466361742030
30170F11528414A1124B68656C6C6F20776F726C64120F
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
n+PRzaE68+89TLlw2+KD43Vcqx7FKK56r5C0si7rQUOolOwPhLBjXmJr5pLR
2HJD8GT1XwZos+2+N1IJ1PtGjoSejEg1/uDFfm97VHGQ8snbhXG45OpRA/Tc
nXVDj9RXnL5brhgqtbVzkmHdcWaVFVCPMuccb+BWFGcdZH9Oq+UaZUo7Y81E
lRey/tCmTBHpXSTzjTw5MZhxLaPCOnb7oSDLsWeq71/IODf+eYMXmqHnD8ny
lhJJCGWM2v9QWV4xOTupGp6lJGakcIaPqHdTSMs3mtCB1VR3IO+s4mSFzLzi
iS4Ewyg1+QHFVOlc7pWRtnCVbGIl7OisFpwR3ZeA11EOGt7g4UEALfKWdTX5
KgFYxItesw0vylVDswoR0Z0F8ze42v4J36lMp2jfP8Va3vp8sVjyFecz4eQo
iWd8W3nt1yKbQphXNhPBV1mFZTrBlpHlY/WpffQWFmYvI6fju13z/G7JS/cc
yG9cB/rZH+jAX/dkPktSeWywfHp8qE/jVPAqz8O2joGCiiFkf2AGFIYENel7
91P6z2iEd3r+4P7gOPjhM+7Dvnf1R7p31fk730ogu1cJHfVVSEKueFy6tdgV
HLtqUQS3/FHqbTTcJjbGkhDzoHvG1Ckpjxvn0A66OfSB4OwEJqvPbxIg5cec
G19YCKW/HwLUPTWd43o3/t1PrHdEe2n7FGZ/qOCCWr8O1z9+Ramcx4/uzpKj
Ff2IRVFWQXFX9kjVXVAVOtsrYWs01P2ncvm0dH6o7q0KNBbCVZPbx0TcjkxH
NRmb5+yjA9frOEXidZttx6lAYeiq1JdEJ/XsQBkQ/nzm9orv2gVRxs9nbr+Y
YltROijf9bwDBaZmx95gR/Ju+eczt9Vy5G3rQzxMjyxpNFGEUS3vftGCWT4A
+Qp8As/ipdhrtiKzGy8fVwUvV5t4znmzfM1hJMr7pKogYmaqR7riik/60odn
6JEno/GFjwrNutnpph7GzfnCDYcK+4eTz89ful+9Pv/Gv5y4X06+o2+dF+ef
f+FfT/wXwxefD7c/f37xoj2Avz8fjcTnu8kXw88bd8Hd+dD/05+u/fVfvvvp
L6OvP3/+otP4ZjhyRj99d5H/+dPG4KfPV/H2j1+l6/Hzy3enN9GfX9289l+O
fP9iskwmaG3+/PPgjzffvI3C3stkdfvzz8/7r/Nb56tPZ1H+7bfzm8Wtn15m
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
AAA=

-->

</rfc>

