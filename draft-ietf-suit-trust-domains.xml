<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-09" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2024" month="December" day="04"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT Manifest format for
use in deployments with multiple trust domains. A device has more than
one trust domain when it enables delegation of different rights to
mutually distrusting entities for use for different purposes or
Components in the context of firmware or software update.</t>



    </abstract>



  </front>

  <middle>


<section anchor="Introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying software updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>software Components from multiple software signing authorities.</t>
  <t>a mechanism to remove an unneeded Component</t>
  <t>single-object Dependencies</t>
  <t>a partly encrypted Manifest so that distribution does not reveal private information</t>
  <t>installation performed by a different execution mode than payload fetch</t>
</list></t>

<t>Dependency Manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios. For example:</t>

<t><list style="symbols">
  <t>A device may contain a processor in its radio in addition to the primary processor. These two processors may have separate Software with separate signing authorities. Dependencies allow the Software for the primary processor to reference a Manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of Update Payloads. The network operator overrides the URI of a Payload by providing a dependent Manifest that references the original Manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new Software version before releasing it. The configuration is delivered as a binary in the same way as a Software Image. The device operator references the Software Manifest from the Software author in their own Manifest which also defines the configuration.</t>
  <t>An Author wants to entrust a Distributor to provide devices with firmware decryption keys, but not permit the Distributor to sign code. Dependencies allow the Distributor to deliver a device's decryption information without also granting code signing authority.</t>
  <t>A Trusted Application Manager (TAM) wants to distribute personalisation information to a Trusted Execution Environment in addition to a Trusted Application (TA), but does not have code signing authority. Dependencies enable the TAM to construct an update containing the personalisation information and a dependency on the TA, but leaves the TA signed by the TA's Author.</t>
</list></t>

<t>By using Dependencies, Components such as Software, configuration, and other Resource data authenticated by different Trust Anchors can be delivered to devices.</t>

<t>These mechanisms are not part of the core Manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware/Software, configuration, or Resource data such as text or images.</t>
  <t>Resource: A piece of information that is used to construct a Payload.</t>
  <t>Manifest: A Manifest is a bundle of metadata about one or more Components for a device, where to
find them, and the devices to which they apply.</t>
  <t>Envelope: A container with the Manifest, an authentication wrapper with cryptographic information protecting the Manifest, authorization information, and severable elements (see Section 5.1 of <xref target="I-D.ietf-suit-manifest"/>).</t>
  <t>Update: One or more Manifests that describe one or more Payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign Updates, trusted by Recipients.</t>
  <t>Recipient: The system that receives and processes a Manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the Commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B Images: Dividing a Recipient's storage into two or more bootable Images, at different offsets, such that the active Image can write to the inactive Image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of Commands.</t>
  <t>Update Procedure: A superset of Staging Procedure and Installation Procedure.</t>
  <t>Staging Procedure: A procedure that fetches dependencies and images referenced by an Update and stores them to a Staging Area.</t>
  <t>Installation Procedure: A procedure that installs dependencies and images stored in a Staging Area; copying (and optionally, transforming them) into an active Image storage location.</t>
  <t>Invocation Procedure: A Procedure in which a Recipient verifies Dependencies and Images, loading Images, and invokes one or more Image.</t>
  <t>Staging Area: A Component or group of Components that are used for transient storage of Images between fetch and installation. Images in this area are opaque, except for use by the Installation Procedure.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically Firmware/Software, configuration, or Resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B Image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error Condition.</t>
  <t>Trust Anchor: A Trust Anchor, as defined in <xref target="RFC6024"/>, represents an
    authoritative entity via a public key and associated data.  The
    public key is used to verify digital signatures, and the
    associated data is used to constrain the types of information for
    which the Trust Anchor is authoritative.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All Dependency Manifests must be present before any Payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All Dependencies must be validated prior to loading.</t>
</list></t>

<t>Steps 3 and 5 are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t>Verify the signature of the Manifest.</t>
  <t>Verify the applicability of the Manifest.</t>
  <t>Resolve Dependencies.</t>
  <t>Fetch Payload(s).</t>
  <t>Verify Candidate.</t>
  <t>Install Payload(s).</t>
</list></t>

<t>In addition, when multiple Manifests are used for an Update, each Manifest's steps occur in a lockstep fashion; all Manifests have Dependency resolution performed before any Manifest performs a Payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accommodate the additional metadata needed to enable these features, the Envelope and Manifest have several new elements added.</t>

<t>The Envelope gains one more elements: Integrated Dependencies. The Common metadata section in the Manifest also gains a list of Dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| CoSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A Dependency is another SUIT_Envelope that describes additional Components.</t>

<t>As described in <xref target="Introduction"/>, Dependencies enable several common use cases.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling Dependencies. By default, any signature of a Dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different Components/Commands/Parameters), it MAY choose to skip signature verification of Dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of Dependencies until the list of affected Components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all Components specified in a Dependency, then that Dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the Dependency.</t>

<t>Components that should be treated as Dependency Manifests are identified in the suit-common metadata. See <xref target="structure-change"/> for details.</t>

<t>If the Manifest contains more than one Component and/or Dependency, each Command sequence MUST begin with a Set Component Index Command.</t>

<t>If a Dependency is specified, then the Manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each Dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support Dependencies and a Manifest specifies a Dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent Components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by a single Manifest and all its Dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a Payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent Manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

<section anchor="manifest-id"><name>Manifest Component ID</name>

<t>In complex systems, it may not always be clear where the Root Manifest should be stored; this is particularly complex when a system has multiple, independent Root Manifests. The Manifest Component ID resolves this contention. The manifest-component-id is intended to be used by the Root Manifest. When a Dependency Manifest also declares a Component ID, the Dependency Manifest's Component ID is overridden by the Component ID declared by the dependent.</t>

<t>The following CDDL describes the Manifest Component ID:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)
]]></sourcecode></figure>

</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>The suit-common section, as described in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.5 is extended with a map of Component indices that indicate a Dependency Manifest. The keys of the map are the Component indices and the values of the map are any extra metadata needed to describe those Dependency Manifests.</t>

<t>Because some operations treat Dependency Manifests differently from other Components, it is necessary to identify them. SUIT_Dependencies identifies which Components from suit-components (see Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as Dependency Manifest Envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a Component prefix or other metadata may be delivered with the Component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The Components specified by SUIT_Dependency will contain a Manifest Envelope that describes a Dependency of the current Manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the Dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a Component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a Dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the Dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a Manifest does not break Dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the Dependency operates. This allows the Dependency to be forwarded on to a Component that is capable of parsing its own Manifests. It also allows one Manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent Component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A Dependency prefix can be used with a Component identifier. This allows complex systems to understand where Dependencies need to be applied. The Dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the Dependency.</t>

<t>A Dependency prefix can also be used to indicate when a Dependency Manifest needs to be processed by a secondary Manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>.
With the addition of Dependencies, some changes are necessary to the abstract machine, outside the typical scope of added Commands. These changes alter the behaviour of an existing Command and way that the parser processes Manifests:</t>

<t><list style="symbols">
  <t>Five new Commands are introduced:  <list style="symbols">
      <t>Set Parameters</t>
      <t>Process Dependency</t>
      <t>Is Dependency</t>
      <t>Dependency Integrity</t>
      <t>Unlink</t>
    </list></t>
  <t>Dependency Manifests are also Components. All Commands may target Dependency Manifests as well as Components, with one exception: process Dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lockstep with the Root Manifest. This means that every Dependency's current Command sequence must be executed before a dependent's later Command sequence may be executed. For example, every Dependency's Dependency Resolution step MUST be executed before any dependent's Payload fetch step.</t>
  <t>When a Manifest Processor supports multiple independent Components, they MAY have shared Dependencies.</t>
  <t>When a Manifest Processor supports shared Dependencies, it MUST support reference counting of those Dependencies.</t>
  <t>When reference counting is used, Components MUST NOT be overwritten. The Manifest Uninstall section must be called, then the component MUST be Unlinked.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each Manifest must invoke each of its Dependencies' sections from the corresponding section of the dependent. Any changes made to Parameters by the Dependency persist in the dependent.</t>

<t>When a Process Dependency Command is encountered, the Manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of Dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Checks whether the Dependency has been the target of a Dependency integrity check. If not, it causes an immediate Abort.</t>
  <t>Loads the specified Component as a Dependency Manifest Envelope.</t>
  <t>Authenticates the Dependency Manifest.</t>
  <t>Executes the common-sequence section of the Dependency Manifest.</t>
  <t>Executes the section of the Dependency Manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified Dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the Dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple trust domains, each domain might require independent verification of authenticity or security policies. Trust domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another Trusted Execution Environment (TEE) technology. Trust domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more trust domains, a Manifest processor might be required in each. The first Manifest processor is the normal Manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second Manifest processor only executes sections when the first Manifest processor requests it. An API interface is provided from the second Manifest processor to the first. This allows the first Manifest processor to request a limited set of operations from the second. These operations are limited to: setting Parameters, inserting an Envelope, and invoking a Manifest Command Sequence. The second Manifest processor declares a prefix to the first, which tells the first Manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first Manifest processor encounters a Dependency prefix, that informs the first Manifest processor that it should provide the second Manifest processor with the corresponding Dependency Envelope. This is done when the Dependency is fetched. The second Manifest processor immediately verifies any authentication information in the Dependency Envelope. When a Parameter is set for any Component that matches the prefix, this Parameter setting is passed to the second Manifest processor via an API. As the first Manifest processor works through the Procedure (set of Command sequences) it is executing, each time it sees a Process Dependency Command that is associated with the prefix declared by the second Manifest processor, it uses the API to ask the second Manifest processor to invoke that Dependency section instead.</t>

<t>This mechanism ensures that the two or more Manifest processors do not need to trust each other, except in a very limited case. When Parameter setting across trust domains is used, it must be very carefully considered. Only Parameters that do not have an effect on security properties should be allowed. The Dependency Manifest MAY control which Parameters are allowed to be set by using the Override Parameters Directive. The second Manifest processor MAY also control which Parameters may be set by the first Manifest processor by means of an ACL that lists the allowed Parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the Manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the Commands needed to acquire and process the Dependencies of the current Manifest. All Dependency Manifests SHOULD be fetched before any Payload is fetched to ensure that all Manifests are available and authenticated before any of the (larger) Payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All Commands are modified in that they can also target Dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Dependency Integrity</c>
      <c>verify(current, current.params[image-digest])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in Dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similar to suit-directive-override-parameters, suit-directive-set-parameters allows the Manifest to configure behavior of future Directives by changing Parameters that are read by those Directives. Set Parameters is for use when Dependencies are used because it allows a Manifest to modify the behavior of its Dependencies.</t>

<t>Available Parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a Parameter is already set, suit-directive-set-parameters will skip setting the Parameter to its argument. This allows dependent Manifests to change the behavior of a Manifest, a Dependency that wishes to enforce a specific value of a Parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the Commands in the common section of the current Dependency, followed by the Commands in the equivalent section of the current Dependency. For example, if the current section is "Payload Fetch," this will execute "Common metadata" in the current Dependency, then "Payload Fetch" in the current Dependency. Once this is complete, the Command following suit-directive-process-dependency will be processed.</t>

<t>If the current Component index does not have an entry in the suit-dependencies map, then this Command MUST Abort.</t>

<t>If the current Component index has not been the target of a suit-condition-dependency-integrity, then this Command MUST Abort.</t>

<t>If the current Component is True, then this Directive applies to all Dependencies. If the current section is "Common metadata," then the Command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the Dependency.</t>

</section>
<section anchor="suit-condition-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether the current Component index is present in the Dependency list. If the current Component is in the Dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all Dependencies or on all non-Dependency Components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-condition-dependency-integrity"><name>suit-condition-dependency-integrity</name>

<t>Verify the integrity of a Dependency Manifest. When a Manifest Processor executes suit-condition-dependency-integrity, it performs the following operations:</t>

<t><list style="numbers">
  <t>Verify the signature of the Dependency's suit-authentication-wrapper.</t>
  <t>Compare the Dependency's suit-authentication-wrapper digest to the dependent's suit-parameter-image-digest</t>
  <t>Verify the Dependency Manifest against the Depedency's suit-authentication-wrapper digest</t>
</list></t>

<t>If any of these steps fails, the Manifest Process MUST immediately Abort.</t>

<t>The Manifest Processor MAY cache the results of these operations for later use from the context of the current Manifest. The Manifest Processor MUST NOT use cached results from any other Manifest context. If the Manifest Processor caches the results of these checks, it MUST eliminate this cache if any Fetch, or Copy operation targets the Dependency Manifest's Component ID.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>A manifest processor that supports multiple independent root manifests
MUST support suit-directive-unlink. When a Component is no longer
needed, the Manifest processor unlinks the Component to inform the 
Manifest processor that it is no longer needed.</t>

<t>If a Manifest is no longer needed, the Manifest Processor unlinks it.
This causes the Manifest Processor to execute the suit-uninstall section
of the unlinked Manifest, after which it decrements the reference count
of the unlinked Manifest. The suit-uninstall section of a manifest
typically contains an unlink of all its dependencies and components.</t>

<t>All components, including Manifests must be unlinked before deletion 
or overwrite. If the
reference count of a component is non-zero, any command that alters
that component MUST cause an immediate ABORT. Affected commands are:</t>

<t><list style="symbols">
  <t>suit-directive-copy</t>
  <t>suit-directive-fetch</t>
  <t>suit-directive-write</t>
</list></t>

<t>The unlink Command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given Manifest more than once, and the Manifest processor must enforce this. The Manifest processor MAY choose to ignore an Unlink Directive depending on device policy.</t>

<t>When the reference counter of a Manifest reaches zero, the suit-uninstall Command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in Manifest processors,
but Manifest processors that support multiple independent Root Manifests
MUST support suit-directive-unlink.</t>

</section>
</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional Components, it may be that there is a need to uninstall the Components that have been installed by a Manifest. Where this is expected, the uninstall Command sequence can provide the sequence needed to cleanly remove the Components defined by the Manifest and its Dependencies. In general, the suit-uninstall Command Sequence will contain primarily unlink Directives.</t>

<t>WARNING: This can cause faults where there are loose Dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a Component can be removed while it is depended upon by another Component. To avoid Dependency faults, a Manifest author MAY use explicit Dependencies where possible, or a Manifest processor MAY track references to loose Dependencies via reference counting in the same way as explicit Dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The suit-uninstall Command Sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="staging-and-installation"><name>Staging and Installation</name>

<t>In order to coordinate between download and installation in different trust domains, the Update Procedure defined in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.6 is divided into two sub-procedures:</t>

<t><list style="symbols">
  <t>The Staging Procedure: This procedure is responsible for dependency resolution and acquiring all payloads required for the Update to proceed. It is composed of two command sequences  <list style="symbols">
      <t>suit-dependency-resolution</t>
      <t>suit-payload-fetch</t>
    </list></t>
  <t>The Installation Procedure: This procedure is responsible for verifying staged components and installing them. It is composed of:  <list style="symbols">
      <t>suit-candidate-verification</t>
      <t>suit-install</t>
    </list></t>
</list></t>

<t>This extension is backwards compatible when used with a Manifest Processor that supports the Update Procedure but = does not support the Staging Procedure and Installation Procedure: the payload-fetch command sequence already contains suit-condition-image tests for each payload (see <xref target="I-D.ietf-suit-manifest"/>, section 7.3) which means that images are already validated when suit-install is invoked. This makes suit-candidate-verification OPTIONAL to implement and OPTIONAL to parse.</t>

<t>The Staging and Installation Procedures are only required when Staging occurs in a different trust domain to Installation.</t>

<section anchor="suit-candidate-verification"><name>suit-candidate-verification</name>

<t>This command sequence is responsible for verifying that all elements of an update are present and correct prior to installation. This is only required when Installation occurs in a trust domain different from Staging, such as an installer invoked by the bootloader.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating Manifests. These templates explain which Parameters, Commands, and orders of Commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a Dependency Manifest as appropriate.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following Commands are placed into the Dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any Dependency is declared, the dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to Parameters in a Dependency persist in the dependent.</t>

<section anchor="integrated-dependencies"><name>Integrated Dependencies</name>

<t>An implementer MAY choose to place a Dependency's Envelope in the Envelope of its dependent. The dependent Envelope key for the Dependency Envelope MUST be a text string. The URI for the Dependency MUST match the text string key of the dependent's Envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a Dependency Manifest that is removed from the Envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a Manifest so that it can be used as a Dependency. To use an encrypted Manifest, create a plaintext dependent, and add the encrypted Manifest as a Dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match Condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext Manifest and its encrypted Dependency may also form a composite Manifest (<xref target="integrated-dependencies"/>).</t>

</section>
<section anchor="template-override-encryption-info"><name>Overriding Encryption Info Template</name>

<t>The goal of overriding the Encryption Info template is to separate the role of generating encrypted Payload and Encryption Info with Key-Encryption Key addressing Section 3 of <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>As an example, this template describes two manifests:
- The dependent Manifest created by the Distribution System contains Encryption Info, allowing the Device to generate the Content-Encryption Key.
- The dependency Manifest created by the Author contains Commands to decrypt the encrypted Payload using Encryption Info above and to validate the plaintext Payload with SUIT_Digest.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following operations are placed into the Dependency resolution block of dependent Manifest:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at dependency Manifest</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Image Digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>) of dependency Manifest</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
</list></t>

<t>The following Commands are placed into the Fetch/Install block of dependent Manifest</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at dependency Manifest</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>The following Commands are placed into the same block of dependency Manifest:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at to be decrypted Payload</t>
  <t>Override Parameters Directive (see Section 8.4.10.3 of <xref target="I-D.ietf-suit-manifest"/>) for
  <list style="symbols">
      <t>Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
    </list></t>
  <t>Copy Directive (see Section 8.4.10.5 of <xref target="I-D.ietf-suit-manifest"/>) consuming the Encryption Info above</t>
</list></t>

<t>The Distribution System can Set the Parameter URI in the Fetch/Install block of dependent Manifest if it wants to overwrite the URI of encrypted Payload.</t>

<t>Because the Author and the Distribution System have different roles and MAY be separate entities, it is highly RECOMMENDED to leverage permissions (see Section 9 of <xref target="I-D.ietf-suit-manifest"/>).
For example, The Device can protect itself from attacker who breaches the Distribution System by allowing only the Author's Manifest to modify the Component of (to be) decrypted Payload.</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple Components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-dependency. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all Dependency Manifests, the following Commands are added to the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Fetch</t>
          <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no Commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The Image fetch sequence contains the following Commands:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some Components are "installed" or "loaded" it is more productive to use lists of Component indices rather than Component Index = True. For example, to install several Components, the following Commands should be placed in the Image Install Sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for the Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument containing list of destination Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index Directive, with argument containing list Dependency Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries created by draft-ietf-suit-manifest:</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>18</c>
      <c>Candidate Verification</c>
      <c><xref target="suit-candidate-verification"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>5</c>
      <c>Manifest Component ID</c>
      <c><xref target="manifest-id"/></c>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Dependencies</c>
      <c><xref target="SUIT_Dependencies"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Integrity</c>
      <c><xref target="suit-condition-dependency-integrity"/></c>
      <c>8</c>
      <c>Is Dependency</c>
      <c><xref target="suit-condition-is-dependency"/></c>
      <c>11</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a Manifest format protecting and describing how to retrieve, install, and invoke Images and as such it is part of a larger solution for delivering software updates to devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>




<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='3' month='December' year='2024'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an Internet of Things (IoT) device), where to find
   the code/data, the devices to which it applies, and cryptographic
   information protecting the manifest.  Software updates and Trusted
   Invocation both tend to use sequences of common operations, so the
   manifest encodes those sequences of operations, rather than declaring
   the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-30'/>
   
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>University of Applied Sciences Bonn-Rhein-Sieg</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='21' month='October' year='2024'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware,
   machine learning models, and personalization data by utilizing the
   IETF SUIT manifest.  Key agreement is provided by ephemeral-static
   (ES) Diffie-Hellman (DH) and AES Key Wrap (AES-KW).  ES-DH uses
   public key cryptography while AES-KW uses a pre-shared key.
   Encryption of the plaintext is accomplished with conventional
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-21'/>
   
</reference>

<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='8' month='July' year='2024'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-07'/>
   
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>A Trusted Execution Environment (TEE) is an environment that enforces the following: any code within the environment cannot be tampered with, and any data used by such code cannot be read or tampered with by any code outside the environment.  This architecture document discusses the motivation for designing and standardizing a protocol for managing the lifecycle of Trusted Applications running inside such a TEE.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-19'/>
   
</reference>

<reference anchor='RFC6024'>
  <front>
    <title>Trust Anchor Management Requirements</title>
    <author fullname='R. Reddy' initials='R.' surname='Reddy'/>
    <author fullname='C. Wallace' initials='C.' surname='Wallace'/>
    <date month='October' year='2010'/>
    <abstract>
      <t>A trust anchor represents an authoritative entity via a public key and associated data. The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative. A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor. This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='6024'/>
  <seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>

<reference anchor='RFC7228'>
  <front>
    <title>Terminology for Constrained-Node Networks</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='M. Ersue' initials='M.' surname='Ersue'/>
    <author fullname='A. Keranen' initials='A.' surname='Keranen'/>
    <date month='May' year='2014'/>
    <abstract>
      <t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='7228'/>
  <seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>

<reference anchor='RFC9019'>
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Brown' initials='D.' surname='Brown'/>
    <author fullname='M. Meriac' initials='M.' surname='Meriac'/>
    <date month='April' year='2021'/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9019'/>
  <seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>

<reference anchor='RFC9124'>
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <date month='January' year='2022'/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9124'/>
  <seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$SUIT_severable-members-extensions //=
    (suit-candidate-verification => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution =>
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-dependency-integrity, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-manifest-component-id = 5

suit-delegation = 1
suit-dependency-resolution = 15
suit-candidate-verification = 18
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-dependency-integrity     = 7
suit-condition-is-dependency            = 8
suit-directive-process-dependency       = 11
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionalities in this document.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-process-dependency"><name>Example 0: Process Dependency</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
</list></t>

<t>The dependency Manifest:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'A2FFB59E9F1A29D20BF655BC1DE909CB7EDD972A6C09D50FC42983778670715E'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'A506F1647E3A9E0F54A07F303443F33E3CFA28520BE1E93C467CD8B14954E460C604A7623F146D833B6F0A2454095855573C48B18570066FA7472077313E80CE'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        ['10']
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'2EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B861BE0C4A2'
        ] >>,
        / parameter-image-size / 14: 190,
        / parameter-uri / 21: "http://example.com/dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 20: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'0F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEAB78EF3D8'
        ] >>
      },
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 373</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F5820A2FFB59E9F1A29D20BF655BC1DE909CB7E
DD972A6C09D50FC42983778670715E584AD28443A10126A0F65840A506F1
647E3A9E0F54A07F303443F33E3CFA28520BE1E93C467CD8B14954E460C6
04A7623F146D833B6F0A2454095855573C48B18570066FA7472077313E80
CE0358F9A70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5857880C0114A3035824822F
58202EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B86
1BE0C4A20E18BE157821687474703A2F2F6578616D706C652E636F6D2F64
6570656E64656E742E737569741502030F1458538E0C0114A1035824822F
58200F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEA
B78EF3D8070F0B000C0014A112581A20696E206D756C7469706C65207472
75737420646F6D61696E73120F
]]></artwork></figure>

<t>The dependent Manifest (fetched from "https://example.com/dependent.suit"):</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'0F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEAB78EF3D8'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'D0703EA193E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / components / 2: [
        ['00']
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent.suit'
    ],
    / invoke / 9: << [
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00'
      },
      / directive-invoke / 23, 15
    ] >>,
    / install / 20: << [
      / directive-override-parameters / 20, {
        / parameter-content / 18: 'hello world'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 190</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13B
B8FB1F09C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703E
A193E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C5
2F1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F
8B035842A6010102000347A102818142303005814E646570656E64656E74
2E73756974094D8414A11746636174203030170F14528414A1124B68656C
6C6F20776F726C64120F
]]></artwork></figure>

</section>
<section anchor="example-1-integrated-dependency"><name>Example 1: Integrated Dependency</name>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
  <t>integrated dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'6391CBC36495B9C87AC3EC841DB124DABD8D3C9FE2DEEFE16569AFC349E7DDB2'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'517250281E6567FF9DF519CF9D76A440D86DFEB65B505D180D7D794FEC67823FA0E98EBC526FBC985777EAB4E2FFE813A44F205C015AEB3FA842F33E37B52716'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        ['10']
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'2EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B861BE0C4A2'
        ] >>,
        / parameter-image-size / 14: 190,
        / parameter-uri / 21: "#dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 20: << [
      / directive-set-component-index / 12, 1,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>,
  "#dependent.suit": h'D86BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703EA193E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B035842A6010102000347A102818142303005814E646570656E64656E742E73756974094D8414A11746636174203030170F14528414A1124B68656C6C6F20776F726C64120F'
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 519</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA3025873825824822F58206391CBC36495B9C87AC3EC841DB124DABD
8D3C9FE2DEEFE16569AFC349E7DDB2584AD28443A10126A0F65840517250
281E6567FF9DF519CF9D76A440D86DFEB65B505D180D7D794FEC67823FA0
E98EBC526FBC985777EAB4E2FFE813A44F205C015AEB3FA842F33E37B527
160358BBA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5844880C0114A3035824822F
58202EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B86
1BE0C4A20E18BE156F23646570656E64656E742E737569741502030F1458
288A0C010B000C0014A112581A20696E206D756C7469706C652074727573
7420646F6D61696E73120F6F23646570656E64656E742E7375697458BED8
6BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13BB8
FB1F09C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703EA1
93E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F
1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B
035842A6010102000347A102818142303005814E646570656E64656E742E
73756974094D8414A11746636174203030170F14528414A1124B68656C6C
6F20776F726C64120F
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

