<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-07" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2024" month="October" day="21"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT Manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
enables delegation of different rights to mutually distrusting entities
for use for different purposes or Components in the context of firmware
or software update.</t>



    </abstract>



  </front>

  <middle>


<section anchor="Introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying software updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>software Components from multiple software signing authorities.</t>
  <t>a mechanism to remove an unneeded Component</t>
  <t>single-object Dependencies</t>
  <t>a partly encrypted Manifest so that distribution does not reveal private information</t>
  <t>installation performed by a different execution mode than payload fetch</t>
</list></t>

<t>Dependency Manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios. For example:</t>

<t><list style="symbols">
  <t>A device may contain a processor in its radio in addition to the primary processor. These two processors may have separate Software with separate signing authorities. Dependencies allow the Software for the primary processor to reference a Manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of Update Payloads. The network operator overrides the URI of a Payload by providing a dependent Manifest that references the original Manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new Software version before releasing it. The configuration is delivered as a binary in the same way as a Software Image. The device operator references the Software Manifest from the Software author in their own Manifest which also defines the configuration.</t>
  <t>An Author wants to entrust a Distributor to provide devices with firmware decryption keys, but not permit the Distributor to sign code. Dependencies allow the Distributor to deliver a device's decryption information without also granting code signing authority.</t>
  <t>A Trusted Application Manager (TAM) wants to distribute personalisation information to a Trusted Execution Environment in addition to a Trusted Application (TA), but does not have code signing authority. Dependencies enable the TAM to construct an update containing the personalisation information and a dependency on the TA, but leaves the TA signed by the TA's Author.</t>
</list></t>

<t>By using Dependencies, Components such as Software, configuration, and other Resource data authenticated by different Trust Anchors can be delivered to devices.</t>

<t>These mechanisms are not part of the core Manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware/Software, configuration, or Resource data such as text or images.</t>
  <t>Resource: A piece of information that is used to construct a Payload.</t>
  <t>Manifest: A Manifest is a bundle of metadata about one or more Components for a device, where to
find them, and the devices to which they apply.</t>
  <t>Envelope: A container with the Manifest, an authentication wrapper with cryptographic information protecting the Manifest, authorization information, and severable elements (see Section 5.1 of <xref target="I-D.ietf-suit-manifest"/>).</t>
  <t>Update: One or more Manifests that describe one or more Payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign Updates, trusted by Recipients.</t>
  <t>Recipient: The system that receives and processes a Manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the Commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B Images: Dividing a Recipient's storage into two or more bootable Images, at different offsets, such that the active Image can write to the inactive Image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of Commands.</t>
  <t>Update Procedure: A superset of Staging Procedure and Installation Procedure.</t>
  <t>Staging Procedure: A procedure that fetches dependencies and images referenced by an Update and stores them to a Staging Area.</t>
  <t>Installation Procedure: A procedure that installs dependencies and images stored in a Staging Area; copying (and optionally, transforming them) into an active Image storage location.</t>
  <t>Invocation Procedure: A Procedure in which a Recipient verifies Dependencies and Images, loading Images, and invokes one or more Image.</t>
  <t>Staging Area: A Component or group of Components that are used for transient storage of Images between fetch and installation. Images in this area are opaque, except for use by the Installation Procedure.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically Firmware/Software, configuration, or Resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B Image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error Condition.</t>
  <t>Trust Anchor: A Trust Anchor, as defined in <xref target="RFC6024"/>, represents an
    authoritative entity via a public key and associated data.  The
    public key is used to verify digital signatures, and the
    associated data is used to constrain the types of information for
    which the Trust Anchor is authoritative.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All Dependency Manifests must be present before any Payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All Dependencies must be validated prior to loading.</t>
</list></t>

<t>Steps 3 and 5 are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t>Verify the signature of the Manifest.</t>
  <t>Verify the applicability of the Manifest.</t>
  <t>Resolve Dependencies.</t>
  <t>Fetch Payload(s).</t>
  <t>Verify Candidate.</t>
  <t>Install Payload(s).</t>
</list></t>

<t>In addition, when multiple Manifests are used for an Update, each Manifest's steps occur in a lockstep fashion; all Manifests have Dependency resolution performed before any Manifest performs a Payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accommodate the additional metadata needed to enable these features, the Envelope and Manifest have several new elements added.</t>

<t>The Envelope gains one more elements: Integrated Dependencies. The Common metadata section in the Manifest also gains a list of Dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| CoSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A Dependency is another SUIT_Envelope that describes additional Components.</t>

<t>As described in <xref target="Introduction"/>, Dependencies enable several common use cases.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling Dependencies. By default, any signature of a Dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different Components/Commands/Parameters), it MAY choose to skip signature verification of Dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of Dependencies until the list of affected Components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all Components specified in a Dependency, then that Dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the Dependency.</t>

<t>Components that should be treated as Dependency Manifests are identified in the suit-common metadata. See <xref target="structure-change"/> for details.</t>

<t>If the Manifest contains more than one Component and/or Dependency, each Command sequence MUST begin with a Set Component Index Command.</t>

<t>If a Dependency is specified, then the Manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each Dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support Dependencies and a Manifest specifies a Dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent Components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by a single Manifest and all its Dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a Payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent Manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

<section anchor="manifest-id"><name>Manifest Component ID</name>

<t>In complex systems, it may not always be clear where the Root Manifest should be stored; this is particularly complex when a system has multiple, independent Root Manifests. The Manifest Component ID resolves this contention. The manifest-component-id is intended to be used by the Root Manifest. When a Dependency Manifest also declares a Component ID, the Dependency Manifest's Component ID is overridden by the Component ID declared by the dependent.</t>

<t>The following CDDL describes the Manifest Component ID:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)
]]></sourcecode></figure>

</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>The suit-common section, as described in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.5 is extended with a map of Component indices that indicate a Dependency Manifest. The keys of the map are the Component indices and the values of the map are any extra metadata needed to describe those Dependency Manifests.</t>

<t>Because some operations treat Dependency Manifests differently from other Components, it is necessary to identify them. SUIT_Dependencies identifies which Components from suit-components (see Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as Dependency Manifest Envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a Component prefix or other metadata may be delivered with the Component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The Components specified by SUIT_Dependency will contain a Manifest Envelope that describes a Dependency of the current Manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the Dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a Component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a Dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the Dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a Manifest does not break Dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the Dependency operates. This allows the Dependency to be forwarded on to a Component that is capable of parsing its own Manifests. It also allows one Manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent Component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A Dependency prefix can be used with a Component identifier. This allows complex systems to understand where Dependencies need to be applied. The Dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the Dependency.</t>

<t>A Dependency prefix can also be used to indicate when a Dependency Manifest needs to be processed by a secondary Manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>.
With the addition of Dependencies, some changes are necessary to the abstract machine, outside the typical scope of added Commands. These changes alter the behaviour of an existing Command and way that the parser processes Manifests:</t>

<t><list style="symbols">
  <t>Five new Commands are introduced:  <list style="symbols">
      <t>Set Parameters</t>
      <t>Process Dependency</t>
      <t>Is Dependency</t>
      <t>Dependency Integrity</t>
      <t>Unlink</t>
    </list></t>
  <t>Dependency Manifests are also Components. All Commands may target Dependency Manifests as well as Components, with one exception: process Dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lockstep with the Root Manifest. This means that every Dependency's current Command sequence must be executed before a dependent's later Command sequence may be executed. For example, every Dependency's Dependency Resolution step MUST be executed before any dependent's Payload fetch step.</t>
  <t>When a Manifest Processor supports multiple independent Components, they MAY have shared Dependencies.</t>
  <t>When a Manifest Processor supports shared Dependencies, it MUST support reference counting of those Dependencies.</t>
  <t>When reference counting is used, Components MUST NOT be overwritten. The Manifest Uninstall section must be called, then the component MUST be Unlinked.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each Manifest must invoke each of its Dependencies' sections from the corresponding section of the dependent. Any changes made to Parameters by the Dependency persist in the dependent.</t>

<t>When a Process Dependency Command is encountered, the Manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of Dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Checks whether the Dependency has been the target of a Dependency integrity check. If not, it causes an immediate Abort.</t>
  <t>Loads the specified Component as a Dependency Manifest Envelope.</t>
  <t>Authenticates the Dependency Manifest.</t>
  <t>Executes the common-sequence section of the Dependency Manifest.</t>
  <t>Executes the section of the Dependency Manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified Dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the Dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple trust domains, each domain might require independent verification of authenticity or security policies. Trust domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another Trusted Execution Environment (TEE) technology. Trust domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more trust domains, a Manifest processor might be required in each. The first Manifest processor is the normal Manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second Manifest processor only executes sections when the first Manifest processor requests it. An API interface is provided from the second Manifest processor to the first. This allows the first Manifest processor to request a limited set of operations from the second. These operations are limited to: setting Parameters, inserting an Envelope, and invoking a Manifest Command Sequence. The second Manifest processor declares a prefix to the first, which tells the first Manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first Manifest processor encounters a Dependency prefix, that informs the first Manifest processor that it should provide the second Manifest processor with the corresponding Dependency Envelope. This is done when the Dependency is fetched. The second Manifest processor immediately verifies any authentication information in the Dependency Envelope. When a Parameter is set for any Component that matches the prefix, this Parameter setting is passed to the second Manifest processor via an API. As the first Manifest processor works through the Procedure (set of Command sequences) it is executing, each time it sees a Process Dependency Command that is associated with the prefix declared by the second Manifest processor, it uses the API to ask the second Manifest processor to invoke that Dependency section instead.</t>

<t>This mechanism ensures that the two or more Manifest processors do not need to trust each other, except in a very limited case. When Parameter setting across trust domains is used, it must be very carefully considered. Only Parameters that do not have an effect on security properties should be allowed. The Dependency Manifest MAY control which Parameters are allowed to be set by using the Override Parameters Directive. The second Manifest processor MAY also control which Parameters may be set by the first Manifest processor by means of an ACL that lists the allowed Parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the Manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the Commands needed to acquire and process the Dependencies of the current Manifest. All Dependency Manifests SHOULD be fetched before any Payload is fetched to ensure that all Manifests are available and authenticated before any of the (larger) Payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All Commands are modified in that they can also target Dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Dependency Integrity</c>
      <c>verify(current, current.params[image-digest])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in Dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similar to suit-directive-override-parameters, suit-directive-set-parameters allows the Manifest to configure behavior of future Directives by changing Parameters that are read by those Directives. Set Parameters is for use when Dependencies are used because it allows a Manifest to modify the behavior of its Dependencies.</t>

<t>Available Parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a Parameter is already set, suit-directive-set-parameters will skip setting the Parameter to its argument. This allows dependent Manifests to change the behavior of a Manifest, a Dependency that wishes to enforce a specific value of a Parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the Commands in the common section of the current Dependency, followed by the Commands in the equivalent section of the current Dependency. For example, if the current section is "Payload Fetch," this will execute "Common metadata" in the current Dependency, then "Payload Fetch" in the current Dependency. Once this is complete, the Command following suit-directive-process-dependency will be processed.</t>

<t>If the current Component index does not have an entry in the suit-dependencies map, then this Command MUST Abort.</t>

<t>If the current Component index has not been the target of a suit-condition-dependency-integrity, then this Command MUST Abort.</t>

<t>If the current Component is True, then this Directive applies to all Dependencies. If the current section is "Common metadata," then the Command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the Dependency.</t>

</section>
<section anchor="suit-condition-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether the current Component index is present in the Dependency list. If the current Component is in the Dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all Dependencies or on all non-Dependency Components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-condition-dependency-integrity"><name>suit-condition-dependency-integrity</name>

<t>Verify the integrity of a Dependency Manifest. When a Manifest Processor executes suit-condition-dependency-integrity, it performs the following operations:</t>

<t><list style="numbers">
  <t>Verify the signature of the Dependency's suit-authentication-wrapper.</t>
  <t>Compare the Dependency's suit-authentication-wrapper digest to the suit-parameter-image-digest</t>
  <t>Verify the Dependency Manifest against the Depedency's suit-authentication-wrapper digest</t>
</list></t>

<t>If any of these steps fails, the Manifest Process MUST immediately Abort.</t>

<t>The Manifest Processor MAY cache the results of these operations for later use from the context of the current Manifest. The Manifest Processor MUST NOT use cached results from any other Manifest context. If the Manifest Processor caches the results of these checks, it MUST eliminate this cache if any Fetch, or Copy operation targets the Dependency Manifest's Component ID.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>A manifest processor that supports multiple independent root manifests
MUST support suit-directive-unlink. When a Component is no longer
needed, the Manifest processor unlinks the Component to inform the 
Manifest processor that it is no longer needed.</t>

<t>If a Manifest is no longer needed, the Manifest Processor unlinks it.
This causes the Manifest Processor to execute the suit-uninstall section
of the unlinked Manifest, after which it decrements the reference count
of the unlinked Manifest. The suit-uninstall section of a manifest
typically contains an unlink of all its dependencies and components.</t>

<t>All components, including Manifests must be unlinked before deletion 
or overwrite. If the
reference count of a component is non-zero, any command that alters
that component MUST cause an immediate ABORT. Affected commands are:</t>

<t><list style="symbols">
  <t>suit-directive-copy</t>
  <t>suit-directive-fetch</t>
  <t>suit-directive-write</t>
</list></t>

<t>The unlink Command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given Manifest more than once, and the Manifest processor must enforce this. The Manifest processor MAY choose to ignore an Unlink Directive depending on device policy.</t>

<t>When the reference counter of a Manifest reaches zero, the suit-uninstall Command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in Manifest processors,
but Manifest processors that support multiple independent Root Manifests
MUST support suit-directive-unlink.</t>

</section>
</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional Components, it may be that there is a need to uninstall the Components that have been installed by a Manifest. Where this is expected, the uninstall Command sequence can provide the sequence needed to cleanly remove the Components defined by the Manifest and its Dependencies. In general, the suit-uninstall Command Sequence will contain primarily unlink Directives.</t>

<t>WARNING: This can cause faults where there are loose Dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a Component can be removed while it is depended upon by another Component. To avoid Dependency faults, a Manifest author MAY use explicit Dependencies where possible, or a Manifest processor MAY track references to loose Dependencies via reference counting in the same way as explicit Dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The suit-uninstall Command Sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="staging-and-installation"><name>Staging and Installation</name>

<t>In order to coordinate between download and installation in different trust domains, the Update Procedure defined in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.6 is divided into two sub-procedures:</t>

<t><list style="symbols">
  <t>The Staging Procedure: This procedure is responsible for dependency resolution and acquiring all payloads required for the Update to proceed. It is composed of two command sequences  <list style="symbols">
      <t>suit-dependency-resolution</t>
      <t>suit-payload-fetch</t>
    </list></t>
  <t>The Installation Procedure: This procedure is responsible for verifying staged components and installing them. It is composed of:  <list style="symbols">
      <t>suit-candidate-verification</t>
      <t>suit-install</t>
    </list></t>
</list></t>

<t>This extension is backwards compatible when used with a Manifest Processor that supports the Update Procedure but = does not support the Staging Procedure and Installation Procedure: the payload-fetch command sequence already contains suit-condition-image tests for each payload (see <xref target="I-D.ietf-suit-manifest"/>, section 7.3) which means that images are already validated when suit-install is invoked. This makes suit-candidate-verification OPTIONAL to implement and OPTIONAL to parse.</t>

<t>The Staging and Installation Procedures are only required when Staging occurs in a different trust domain to Installation.</t>

<section anchor="suit-candidate-verification"><name>suit-candidate-verification</name>

<t>This command sequence is responsible for verifying that all elements of an update are present and correct prior to installation. This is only required when Installation occurs in a trust domain different from Staging, such as an installer invoked by the bootloader.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating Manifests. These templates explain which Parameters, Commands, and orders of Commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a Dependency Manifest as appropriate.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following Commands are placed into the Dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any Dependency is declared, the dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to Parameters in a Dependency persist in the dependent.</t>

<section anchor="integrated-dependencies"><name>Integrated Dependencies</name>

<t>An implementer MAY choose to place a Dependency's Envelope in the Envelope of its dependent. The dependent Envelope key for the Dependency Envelope MUST be a text string. The URI for the Dependency MUST match the text string key of the dependent's Envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a Dependency Manifest that is removed from the Envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a Manifest so that it can be used as a Dependency. To use an encrypted Manifest, create a plaintext dependent, and add the encrypted Manifest as a Dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match Condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext Manifest and its encrypted Dependency may also form a composite Manifest (<xref target="integrated-dependencies"/>).</t>

</section>
<section anchor="template-override-encryption-info"><name>Overriding Encryption Info Template</name>

<t>The goal of overriding the Encryption Info template is to separate the role of generating encrypted Payload and Encryption Info with Key-Encryption Key addressing Section 3 of <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>As an example, this template describes two manifests:
- The dependent Manifest created by the Distribution System contains Encryption Info, allowing the Device to generate the Content-Encryption Key.
- The dependency Manifest created by the Author contains Commands to decrypt the encrypted Payload using Encryption Info above and to validate the plaintext Payload with SUIT_Digest.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following operations are placed into the Dependency resolution block of dependent Manifest:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at dependency Manifest</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Image Digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>) of dependency Manifest</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
</list></t>

<t>The following Commands are placed into the Fetch/Install block of dependent Manifest</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at dependency Manifest</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>The following Commands are placed into the same block of dependency Manifest:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>) pointing at to be decrypted Payload</t>
  <t>Override Parameters Directive (see Section 8.4.10.3 of <xref target="I-D.ietf-suit-manifest"/>) for
  <list style="symbols">
      <t>Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>) pointing at encrypted Payload</t>
    </list></t>
  <t>Copy Directive (see Section 8.4.10.5 of <xref target="I-D.ietf-suit-manifest"/>) consuming the Encryption Info above</t>
</list></t>

<t>The Distribution System can Set the Parameter URI in the Fetch/Install block of dependent Manifest if it wants to overwrite the URI of encrypted Payload.</t>

<t>Because the Author and the Distribution System have different roles and MAY be separate entities, it is highly RECOMMENDED to leverage permissions (see Section 9 of <xref target="I-D.ietf-suit-manifest"/>).
For example, The Device can protect itself from attacker who breaches the Distribution System by allowing only the Author's Manifest to modify the Component of (to be) decrypted Payload.</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple Components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-dependency. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all Dependency Manifests, the following Commands are added to the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Fetch</t>
          <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no Commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The Image fetch sequence contains the following Commands:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some Components are "installed" or "loaded" it is more productive to use lists of Component indices rather than Component Index = True. For example, to install several Components, the following Commands should be placed in the Image Install Sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for the Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument containing list of destination Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index Directive, with argument containing list Dependency Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries created by draft-ietf-suit-manifest:</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>18</c>
      <c>Candidate Verification</c>
      <c><xref target="suit-candidate-verification"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>5</c>
      <c>Manifest Component ID</c>
      <c><xref target="manifest-id"/></c>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Dependencies</c>
      <c><xref target="SUIT_Dependencies"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Integrity</c>
      <c><xref target="suit-condition-dependency-integrity"/></c>
      <c>8</c>
      <c>Is Dependency</c>
      <c><xref target="suit-condition-is-dependency"/></c>
      <c>11</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a Manifest format protecting and describing how to retrieve, install, and invoke Images and as such it is part of a larger solution for delivering software updates to devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor='RFC3986'>
  <front>
    <title>Uniform Resource Identifier (URI): Generic Syntax</title>
    <author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'/>
    <author fullname='R. Fielding' initials='R.' surname='Fielding'/>
    <author fullname='L. Masinter' initials='L.' surname='Masinter'/>
    <date month='January' year='2005'/>
    <abstract>
      <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='66'/>
  <seriesInfo name='RFC' value='3986'/>
  <seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>

<reference anchor='RFC6024'>
  <front>
    <title>Trust Anchor Management Requirements</title>
    <author fullname='R. Reddy' initials='R.' surname='Reddy'/>
    <author fullname='C. Wallace' initials='C.' surname='Wallace'/>
    <date month='October' year='2010'/>
    <abstract>
      <t>A trust anchor represents an authoritative entity via a public key and associated data. The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative. A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor. This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='6024'/>
  <seriesInfo name='DOI' value='10.17487/RFC6024'/>
</reference>

<reference anchor='RFC7228'>
  <front>
    <title>Terminology for Constrained-Node Networks</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='M. Ersue' initials='M.' surname='Ersue'/>
    <author fullname='A. Keranen' initials='A.' surname='Keranen'/>
    <date month='May' year='2014'/>
    <abstract>
      <t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='7228'/>
  <seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>

<reference anchor='RFC8392'>
  <front>
    <title>CBOR Web Token (CWT)</title>
    <author fullname='M. Jones' initials='M.' surname='Jones'/>
    <author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'/>
    <author fullname='S. Erdtman' initials='S.' surname='Erdtman'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <date month='May' year='2018'/>
    <abstract>
      <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8392'/>
  <seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>

<reference anchor='RFC8747'>
  <front>
    <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
    <author fullname='M. Jones' initials='M.' surname='Jones'/>
    <author fullname='L. Seitz' initials='L.' surname='Seitz'/>
    <author fullname='G. Selander' initials='G.' surname='Selander'/>
    <author fullname='S. Erdtman' initials='S.' surname='Erdtman'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <date month='March' year='2020'/>
    <abstract>
      <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8747'/>
  <seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>

<reference anchor='RFC9019'>
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Brown' initials='D.' surname='Brown'/>
    <author fullname='M. Meriac' initials='M.' surname='Meriac'/>
    <date month='April' year='2021'/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9019'/>
  <seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>

<reference anchor='RFC9124'>
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <date month='January' year='2022'/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9124'/>
  <seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='21' month='October' year='2024'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-28'/>
   
</reference>

<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='8' month='July' year='2024'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-07'/>
   
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='8' month='July' year='2024'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware,
   machine learning models, and personalization data by utilizing the
   IETF SUIT manifest.  Key agreement is provided by ephemeral-static
   (ES) Diffie-Hellman (DH) and AES Key Wrap (AES-KW).  ES-DH uses
   public key cryptography while AES-KW uses a pre-shared key.
   Encryption of the plaintext is accomplished with conventional
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-20'/>
   
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>A Trusted Execution Environment (TEE) is an environment that enforces the following: any code within the environment cannot be tampered with, and any data used by such code cannot be read or tampered with by any code outside the environment.  This architecture document discusses the motivation for designing and standardizing a protocol for managing the lifecycle of Trusted Applications running inside such a TEE.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-19'/>
   
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$SUIT_severable-members-extensions //=
    (suit-candidate-verification => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution =>
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-dependency-integrity, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-manifest-component-id = 5

suit-delegation = 1
suit-dependency-resolution = 15
suit-candidate-verification = 18
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-dependency-integrity     = 7
suit-condition-is-dependency            = 8
suit-directive-process-dependency       = 11
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionalities in this document.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-process-dependency"><name>Example 0: Process Dependency</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
</list></t>

<t>The dependency Manifest:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'A2FFB59E9F1A29D20BF655BC1DE909CB7EDD972A6C09D50FC42983778670715E'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'A506F1647E3A9E0F54A07F303443F33E3CFA28520BE1E93C467CD8B14954E460C604A7623F146D833B6F0A2454095855573C48B18570066FA7472077313E80CE'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        ['10']
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'2EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B861BE0C4A2'
        ] >>,
        / parameter-image-size / 14: 190,
        / parameter-uri / 21: "http://example.com/dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 20: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'0F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEAB78EF3D8'
        ] >>
      },
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 373</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F5820A2FFB59E9F1A29D20BF655BC1DE909CB7E
DD972A6C09D50FC42983778670715E584AD28443A10126A0F65840A506F1
647E3A9E0F54A07F303443F33E3CFA28520BE1E93C467CD8B14954E460C6
04A7623F146D833B6F0A2454095855573C48B18570066FA7472077313E80
CE0358F9A70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5857880C0114A3035824822F
58202EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B86
1BE0C4A20E18BE157821687474703A2F2F6578616D706C652E636F6D2F64
6570656E64656E742E737569741502030F1458538E0C0114A1035824822F
58200F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEA
B78EF3D8070F0B000C0014A112581A20696E206D756C7469706C65207472
75737420646F6D61696E73120F
]]></artwork></figure>

<t>The dependent Manifest (fetched from "https://example.com/dependent.suit"):</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'0F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEAB78EF3D8'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'D0703EA193E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / components / 2: [
        ['00']
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent.suit'
    ],
    / invoke / 9: << [
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00'
      },
      / directive-invoke / 23, 15
    ] >>,
    / install / 20: << [
      / directive-override-parameters / 20, {
        / parameter-content / 18: 'hello world'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 190</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13B
B8FB1F09C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703E
A193E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C5
2F1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F
8B035842A6010102000347A102818142303005814E646570656E64656E74
2E73756974094D8414A11746636174203030170F14528414A1124B68656C
6C6F20776F726C64120F
]]></artwork></figure>

</section>
<section anchor="example-1-integrated-dependency"><name>Example 1: Integrated Dependency</name>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
  <t>integrated dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'6391CBC36495B9C87AC3EC841DB124DABD8D3C9FE2DEEFE16569AFC349E7DDB2'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'517250281E6567FF9DF519CF9D76A440D86DFEB65B505D180D7D794FEC67823FA0E98EBC526FBC985777EAB4E2FFE813A44F205C015AEB3FA842F33E37B52716'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        ['10']
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'2EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B861BE0C4A2'
        ] >>,
        / parameter-image-size / 14: 190,
        / parameter-uri / 21: "#dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 20: << [
      / directive-set-component-index / 12, 1,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>,
  "#dependent.suit": h'D86BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13BB8FB1F09C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703EA193E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B035842A6010102000347A102818142303005814E646570656E64656E742E73756974094D8414A11746636174203030170F14528414A1124B68656C6C6F20776F726C64120F'
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object: 519</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA3025873825824822F58206391CBC36495B9C87AC3EC841DB124DABD
8D3C9FE2DEEFE16569AFC349E7DDB2584AD28443A10126A0F65840517250
281E6567FF9DF519CF9D76A440D86DFEB65B505D180D7D794FEC67823FA0
E98EBC526FBC985777EAB4E2FFE813A44F205C015AEB3FA842F33E37B527
160358BBA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5844880C0114A3035824822F
58202EEEC4ACEC877EE13D8B52DB16C4390C93E5D84FD9F25AEAE0717B86
1BE0C4A20E18BE156F23646570656E64656E742E737569741502030F1458
288A0C010B000C0014A112581A20696E206D756C7469706C652074727573
7420646F6D61696E73120F6F23646570656E64656E742E7375697458BED8
6BA2025873825824822F58200F02CAF6D3E61920D36BF3CEA7F862A13BB8
FB1F09C3F4C29B121FEAB78EF3D8584AD28443A10126A0F65840D0703EA1
93E12381A66FFADEF2F0949711CFE05ED2322818D73D19F2BBD91BE5C52F
1604B45C405E96B0642F3D49B2D7C6E3B2C0B40030BDDFBD27AF930B1F8B
035842A6010102000347A102818142303005814E646570656E64656E742E
73756974094D8414A11746636174203030170F14528414A1124B68656C6C
6F20776F726C64120F
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+19aXfjxrHod/wKvJl7zkg2SXFflDjvcbUVz+KMZDuO4+MD
kZAEDwnQACgNZ0b5Lfe33F/2aukVaJKyNUmc3My5N6ZIoLu6urr2qq5Wq14e
5cvw1D//+uzCfxHE0VWY5f70bR7GWZTEmX+VpP6LzTKP1svQv0g38OskWQVR
nHnB5WUa3op37Z8WyTwOVjDuIg2u8moU5lfVbBPl1Rwfqy74sWq9582DPLxO
0u2pn+ULz4vW6alPDzXr9UG96QVpGMAU4XyTRvnWu0vSN9dpslnztN6bcAtf
LU79szgP0zjMqxOc0fOyPIgXPwbLJAYotmHmraNTz/fTq3m4yPLtUnzr+3ky
Nz5G8SKMc/lFlqR5Gl5l6u/tyvozT6O5enierFbwrvo1ipdRrKcJ3+bVZQSL
h0EukyU8Vk0++RR+AVytgvU6iq8NOH5chrchPtT2vGCT3yQpQF+F3/AfoO7U
H9X8F0kaxOI7RvcoDeNFEFu/JOk17Ou7IIf9PPWH6cp/Hq2iPFyI30PYi+Wp
f8mv1lb4ag137P9d4y81WJdXmPvLmn8RvAm2wSqwpv8yjIs/2LOfT8evXvjj
V7WK//xiUrMheBPGtVy8XQIgTtIVDHIb4i6+no1bg35XfOzWm23xsdds9sXH
fmvQlB977Z74OKg3BvJjg187q05qmkBX4gycAi3GV+ak9nOb9QIoFx8PrkPc
9/IjV1G6ugP6rYbxPN2uCQPmQ3kYrqtBOr+BzZjnmxRm8arVqh9cAmEFcyDi
i5so87N1OI+uojmh0F+E2TyNLsPMD/UhzRM/vwkLh5iB948COI7hFZDiAjbP
f//evd77+2M665ssxMcW4XqZbIme/bsov/FWkgfQ4fTFCa75Q3j0NpqH/k2Q
+UA78MANECAcO+tJ/+4GaCPKvTAOLpcA/SJchte8pOTKX0RXVyEQYO6n0fVN
TitabfJNsFxu4ceMhoIT4sMjUR7BKZGw4n/12+tNuk4yGB6+HSerNYCBK4D5
ET/zJMZjiBPKvfHgwSy5yvGzz3ta411YRYvFMvS8pz7yljRZbOYE7fun5p/3
njeh9We47ty/TvzLcJvECz8DcJdhNYuu4zAVQ/tp+PMmgpkIUUDXgNC3frpB
hNBCCOu4zgJMgOgZ/B6+DfCVisA5IDzYyjGBeD7RrxmLv0qTla+2Tz2BgOFM
zF0IqTUYIfBX4Rx2MMpWuAlpuEpuQx92dBPHYbgAIlJD43y8yOTyJ6BgfxKu
Q+Sfc9wgHGodpDlsoKB/eFcRZ5Ywvmhvo8sN03YCS4oTIAJgfsHSX6fRLWJN
HcQkhmGB7HKgC6addZjibzD05RYm1JQQvgWRQY+skoUgynWwXSbBwr8K8/kN
bpwAd6vgglNF9OlnAEEKIASLRYSjwEektnmQ4V6cxbS0aL5ZBmkFaWsrX8zv
EiQ+2mBJrED8iY84JzIGWAtEC8uM4DSERPbzBORZFCMh+nT+5wD5ZYjT0wGG
A7v1szlMl0aJTRdEAupAIm0gxePpg61IEyAYEGg4RgQLTYNFlOAfcomSiwA4
qyDd6jcQjjDjpakvmfZuglvEFSAD9+lc0hZyDP21i9IsWvFhO5M7ZmFyCESR
ExqmSkIdLDIwSApPWokO5KTbGuEGNARUIfwECCfIcaNgFXdRdoPDwhy3ERDL
MpnDfs8D4MwANnCLr/n0fsX0kxFCykPBQUlTeD8jwL9+fYavBvItBIwnIFzg
WScE5HoFdCLU2ngYgP06QvKTT1V8OC3w1HoZ4DO4lTBVzdx5BZFYUEbT0U+8
M8kqNCkbqOQqut6kdKR4ccWR7oKYuXLOgIZRar/GI4eAM0DMnd5HwAnKKKDg
KzwSKbD9ALkGAM4z2aNEJBlA4qawlQECfgmrh/0XLDwDPQOA2fJvapazFUhh
N+QFfKpXtJxE/mj9xDQjpoSFJnexfvzuJoI1BkvgYCxWMylbDBzibsT+kMdR
uIPNJpEY+BPJ9pieJeFJtk64lCIKvpXqA6hI24wJANkkLBEUOZq+MCCeBQBp
Ee48aIUXBNIVoTzLzGkNBkywJQAAYeAadEWSyzhX6aCLM3chuN5wvV5KNeYF
6U2pf3QxfHGsMaTEQYiLy5A6oywowQBPBmrYqeL00/g2SpMYtZYiYwucUMDs
x4xOJXqIo+1YjY1LyfABmbAIZt0xaiogCVFeMs8QHBgHIna2Z1VgsBh8AaRS
EovRGUY4ObeC2i6GBrvjL2DHmN5AfxltQVzglCbAFVMpyDZIxJmi+YpNwBUC
JoGRU/91mCWbFI4UrCcgbKBcQ7uNZteslk3AYTy/QfEgxJY+zURlRN811GxR
oihVIyPxSDQNchX5Jp8p85xaejBjhAQvvcmqyZWUvMHiNoAjv9BCu6KWjCOb
WrdSqYv6cUk/v7+vOXVy0sQXmUMHt5872qN810jTHCfxLWIXlXrcgQs84XGy
TK63hDNkAD4avJn/5MXX5xdPKvxf/+Ur+vx6+qevz15PJ/j5/Ivh8+fqgyee
OP/i1dfPJ/qTfhMssxfTlxN+Gb71ra+8Jy+G3z1hunjy6quLs1cvh8+fMI9E
pp3MN3TuSM1BJRh+Aot8nYY5cXLPwvJo/NX//HejDdj+P2CJNRuNwf29+KPf
6LXhD7QXBBXGoELyn7jfHtjKYUDcGbgZbO46AnUQ9he2NrtBVg1Ei0q8N1QS
brmld4E+kP/RWdSIRZlDylV+kyaba2Ju1ppIrcJ9PdUiQmgEUkuR3gek3AvU
GhCeZcYK1dn0Yoab9gYnJueFeA8JCd0UQbpATikUBbDR/XUUogy7KnI980CB
uNuugbTQRJoJWXGy8zwnxYOsjgNZRIBPFKFkAsjndgOCeorCmsX35CJwHHkK
cBx1IiKS6ZsYbCscdhXmAfOVS8Q7mo3yDJsmTKIlUwVpgYjMA+mLuxaumFDy
Gy1BASoW1MwigOeTMAIJES5BNUCQBGcGDkfiFt/WOhYwL4PTkdxLkfDEwyQZ
E5B+a5jEwg2IcuQWkt8bI7IYeVfi+ww8GxwoUEBDYrv7KAtD9HzRC51aA/G1
l4N8Isjy1H9l4FHbNmxxiXNo4VpptmoMIUxA7J2SWgUHCxZPCq29eORIkhBI
7eD34QBIaweExGtgg0BKsComMPEXD51t4bGV1H7nYYRSDnEidH7SX+UqTMLy
v5JGAe+noBcpPtQ0PDRSKZznzEAITsKGopCrQHOA0YXyGJizKno8Rd2OxDvt
F/AQPIX+JZgNb+Tc8kBWdktYtAGR8ovQWnPB/tP5YbZB5xA4jbYdjENCi1yh
CL6UbgP0QqDlH8Rhssn4CIgl4qAgbYSGROdrEqVIbLchPyZ+wwdz4U9iOxJO
Qb4tIxl5CIChIcJh1JiEtIBpWXJNY4MSacnjS1JVO4tvk7n0W0pqQHISOrik
nBA2NpUeGBIXkvRIkYsyucmLCs0tzGU4c3OU/5dJQtAvg03MJp9TWyRl9mTE
tkZ2CktTtpxayDPk6EkKD+BGJZY3AKchguEB4NjnhvKUXF1lYS7VFFoJKSqE
PH6FVKo7OJKhNNXBNDJ+P8qOxekijzgeLcAKbD8fW7HxrGbG2yLrjXJ+eZ2k
RHHoq8YXeTjaTDpuC3RU0uByQ4gqbxMSbyZTycKfN2x4wRPyZBkcxhgO1NkN
qsYsQc/z4BoHUw8QzGem30f9hOOVnlfkQi8TMsnnQ35H0xyCYVnuaTORPQiS
jTFvhi1lBrFiW0JOOEzDAAFwg+aAQviudoNBU5GKZM/yOyDlNXkGj0gnWhuK
DdhgGR4dIXNWx0x7QWxTjyTMZaLpWZ8wG2yNeXLd8mnTxxVEFWi1AO6kuAxJ
2yhNEB5F67hEJBKkBoNG2HA39nBI8Z6hwQHhUcX9iuyOPKSZ0PwJEQSfXCq8
wQAAS8zvwjBmMhDQ6D2rycekOotRJxo8WQdAxBVgGfNwnSsPubC69pCk4Pqn
9EzKzmJGEZ05hp6s8cDJB+FrmOhqs/SvgCvJ/ZJixdBEpTKWK2UQbaprIqKr
lI5gjmSiKSsGIyNBoJdogcE2bIUKskKFOoxRCSY6R60JP7x/L0IroJePlwEc
+Xq1qY25Txh7uNSCjmgubZOxWibXh7JCLq1iQP/xVFl/CBp4Reuk8Ca6DMXG
Iy5wQwwSXCa5UJ2ulAN4nWRZRB7hwvGRWuk1nLBYE6a5FOmyVVJDCCx0jg8v
mc+C9Xgr/BVKYXUoOLCmVbiIgCMt0eu6zDPDwy3N5U1KokQTon8Gag+Qck4q
FHNyEgYwa5pSjERIeSV2hf1+Kv024m8yr6wwkgi83d9X0BkJ/JFOpYo6Sq8J
hc/YE771b6MAVYjN5VIojiSLYH3ziLQV3M2aj8JFjGI8atgbxH7Q83CNph9p
nQHa55myAyQQ9tBlmyUQeh7sWZgVzRz4JMbRO2PihOjHXKaw4en4Ea2TM+Bb
sPyu8KC/AGVkyWY88hCxa1chw+4LHApmhk+QqeEOvMmoTyacuZtrtBkCkxzu
5Lx6YLHaX+ujAEMYT4fhOQYEb1Zr6bmFHyQrvgkdUp7CE8BinIEXqbkKaKXD
GDUV6UGHKViMg3n5EEiEluQUciVYUIJJGG6DZcT68zqN2EEqBBpMfJ6H68xv
Eal1SEhYs4VvAZ+MbEM4qM0gVUwbQJ7XqPnfMD2Tf1vSstxFbYE0rQcDVkwv
o2WklXH9cKtGPHIJZ89cYc1r1/wZyUCBVFIaO2roMawq4ihotyblm/Wsd6Y9
qxUO6yoSNSwrUzArbarCAQL5GGnLiMxkDryLlR40ovBL/yrIbmCK35GXRw9M
/lmDgFJc5aYYC9S0o8hc/JoZERkiJoApn5dOrnrthdSSz0mK4868fypV52om
v6xi8Oc2Cu/u4YCD6JxjNkhCB4B2SxOqUruFz5LiAtKTnGl+wB4r6bAgalNA
ibAbSygMtyifAZEi+1f1u9fEMVDt4rCkeJiTZq5TInSLSki9R40dw6cS3kx4
IgqmsQgE0BSBshpsovM4XnZnDKawGUm33SUAewfP/u1vf/M+re7696n3QS+s
8O/DgfeGtkdnRAY7vfdBL0f/swf4g797cDXDufLiTOWOMGQGkK6pzDV88L/Y
ANOtvg4BVTjUBao1hVEeAMs4Of/2bOKYwfyoqfobEagrwLKDRAqjCEvPf7lZ
XYZpeUXGKNLVVIbltYrqwpmYbYxjf2hvDYxIstULs2FxIt2E4lM1Ch65c2XD
WqMcgOUDLeyDP4muiWnBgVA0qwjjA+2RG9gP/u9xqA8P2ekDsPAGGBzzDDi8
WpDYgE/3kDfTkrTGziYmKqz9K+JMzy6WWXpAzbFv9oPr49mfC85z5K+DKM34
4+EN1+v4hDL4ED7yGgngf8HrQXrNMZAT9f3DX4d/Kfle0AheJyDbtw9//fjY
+f3DXt+NeeTEKBetg+95Q5OayIbiQCGqlT8qOreczZkpAQ0PIY6WlQJwZn4V
mBeuqKsUfnOmLJ2bAwA//Z//NkX5a9aUF/BdCLoFiG+hOy+qc/rmXgb1hIAT
ynQmAgpg80Rs8AF0xcGOpH++W2se73fQA2gvKO2L3wxSlQ62YDUKQF4si1Hb
mj/aIhAB6FgV0mgsFTGwlGmMBF6G0j2zqPlfJHeIKNIlUCFCrxzaC+zO0LmD
sHrMQjsVsRWVLpJt1kiTGXtVUYOgvFSaeU7Ov6M48Yfj58I4ROiFu0gn+7C6
Ip6nIL90empKOJH+wZOvgjQANQGk0XHFj0ABG34HKEuSjMRC9iZaGxjglc6V
3WPHu7OIhIkMEku0cNQaOXPN/9ZerwItIptZeo3Y9OKUXB1IJvMMdFtYvgPS
BUozIqEikNpeLYLsb2DmJb0kFakAACJzwkxnzPw3MapMMosOJkffMCEHyGmD
ibz5DjQVUwmjKzMZCVVyzljEfE6xZzonE3VxM4uATUfpsNSkSAQnnEAGgRoJ
fpwHGewAsuafR6toGaTouYqulGnEISg+lzIEgoBeobagwdSRwAqp4in5IsUP
tF0EXpzsIiXAcBzi2jH1SKRh6HXASS46IkGF3SzR8ABaCQMOebvtXKTECAFX
iKPFIa+Y2xo3ICEEa+O9NjLYs3d/L5JF8yBaIsc7s60/Gdks5uNqIQ4H7QRG
MPeLDDMpoKXnXnKU60jkdwUYjzK1AXj9rXyNIQkK0kHRiKIJA1Kd1UczSd+g
Hatnhsmm8oW19fxSst4syVXPxGmtIFPuiJJ3zD8SHgp44Ixc08dkZA858hLG
5CojvBRMHwXAqchgg5GzNbrSMHNXP0vvGthASr1EfiLDUXrvdLJEqk+J4L5l
L3tQ8t6Qg89x/uyRCV/keZR7pf2zitWTsz3bH2s8CuwQ5bGYEBiRSCu5la4K
9nM7srGtAVg0KXZCSZycXGwYmrhyGAo9xxZKOFqWXIco5ZhO2ELeXMGJptVR
qlzG2fLRCpOMVO5UlBocGQmAweA00ms1sfYaIPeE5W2NFbiWJMxesQpHumfE
zrs8wqD0nF3SsCMYjdSOHFBn3I4J0x9R4hD7NBrHCEqL6dfax/urBFBlewow
qVFM0wBdI+L7arS4J1+RzHIXrm+SlJh0iwQeLO+CLZ4Jf77EnB6R2YGhYRML
BnflKMbvWGWB/9Np2Bj4EFORNqWiw1SYIDxUMHusd8KaRHg93OtK2ZeW8bxU
RxDrZFm1ZpWCAKtH6PAAxcLJI1O4RejI3mbUQ+KCMmf5VxbhHNZIp9wErFKQ
TKZrzVoAACPSk+E5CYP1hJhBAajQJOhY8+PxZPLc0OzzXVg7JV8OPu3913+R
cSAf+9EoMDs5+cwnQ+XIojQbl5/9ga0LNfyPZ1KEpsfCTgGipGcs1qBL2tjs
BgotPXQvDqohgsXBEVEPd3pg4WBUfOMQ1TqcdSC2X8jOVWAHMZEYdekI/UFy
zLWhTGmY/ys1IBwtEMelPKRMiLoNlpuw9A7aEQBdGrjckSpDCDT4zEldqHSM
wnmAZhfZE5xtzfYE6j9u1Udp13BWKeua7UYtGog5WLoXgCOUJaLKVc2xx0qb
yoTtUSx+kTurpJeZWMW7tT+1yshq3K/eKTdP5gQ0cxBBVinkHhS0q5r/ygj2
m8cfhPpV9BbVF8aj2kpkr1bqrUpws+gExyZHL55nlGq07EUBYsM5Wz7Q7Nip
hvZxPqLzXB5NnmKrTujYKyPqM/89DfGpvwEWWn5v+6N0y3v33q6f1Cj/twDK
tiowt4+r0Juf+GKdxvCadcHcxHlAkQJLQh12tQ1EyCovOYh1xV5l53pETDpc
rfMtkcqRlHSq+gGeT1jTjN6FXAcRg/lz7KI46RHAQlYkWtMWGo9evUazMYkp
fU0OK9i908oD6iwADqS1XBplRqWDUPIDmcemELi2eZ2pJ2mDSSV+m6orqwcc
eUP0qclF1SEsXERLC4YcV1hFqIIwN8sLE+PfaDtF8W2QRmhVi+iJhF1OJdNS
+SiqeAwVYZFOhsibJxtUqUVlQYWcYqLCwIhLUCJhRnkO5OaiukcxIOwOqQoi
+I9UwMxNxPGrlPsAvAtDfAlXdOhDL3NFYDtI42WZVthS1imE6isJCLknWiw8
5k8bLgLysVK1ypmxC98S8Sq9dlEKGKndMcAoaySSP0XS51egndSMFmziCOw9
ECtKWASGamgoklLl1TvPb+AJkI4DXrnElYxHi8qBqyjNSkRAe2DvYpXTQaOi
7wAUM7l+Yc3ydFTot5yTJSuwbCFNB8woYJiplDKq0OQ0RO3MILFnnEZlUl6C
+HpjW0+LDY1J5hFxFTmIojmFK1JFLeEsTVRKohA5k2Q2UrZKulWeWXk+gtj+
PeUSWVuNrOhV5WYNnIKtAlY/qeCUZyPUK6Pob3mNvsebFR2iPOVctPGr8+mP
55iijPyY/noRzGuG9lcWEXKjlUsl2C0yHHrF4aRt36wnEQwqm1PENzfyTkym
SbpWKLeFksiKjE0oK7DOuyBFCSSroMq8YB6syaMOcMKJEaV5mVXzllEiEW2+
mA1Zoi5bFHUJWLvMGqRKCDBsLZUBrirIWL00fkBpycVkICWz3PI5+DeAYSzG
kUxb7gx8lOUotK/GeKg8okW4YivGiluI/TWLawUZGTqS2lob1wWTlhnQAvg6
FnMIOreOGC5MoInyNqh4w94wBzwRu+2Qx9wlWPQoTFRmQRkujd5bq+IjMUjR
UetrGs3KHGkPZmjLJTiITWmi3O02V3GtmVisTOCXDp0Q5RSe+rID0GVqyS1H
7lw1/FgZBVMKjpGh6JoAY2MSN64QByPdeZ87ZN97ZnjnoGPE+1Zq2arwsByR
QGNpLoDmwjWDmdK7EpwVgwMcbJNn0SKUeWokqphDYHhgIUryOblaVGqrGZa5
kCOX4U1wGyWbVKb/vY24oYKZFY51tSrzHJlBmBo1GIobUO7UDNP6MKVDlUyQ
Y1uE7sIFPMQaNDr3dExHfCnyGg0CEj+cOb6zYteYR4CNYPinr7HHyhuEZ6ev
nWjYDDkOtZuY9bM8SK/DHSYrhnnCJaaXWRYbsQo8nCqQdqrS4U31Us0jUyfl
ZpLigJoYdqsh5O+mLAoscQxNB1FBK6HuMxTRMdcfCcrSZw/IVmVVKUuw4H+i
87EKg1g4I9jBaaktUksvBQlk1pz0aqv0KyushIpN6niZbVXlEbeDUw4wjG16
rXO/aHFSWS0BEm8tUKz8L3oVMShccI7cW+UaV3LN9CKadEGxRrVd2Q051Oxc
qAdN5HiTQ4y4QqlzaQ2Y7ArRq6DgtDHndLwgMmKt2mBZUIqoREUUS05AGBes
sq9jkeCo2KqkA3ZlGyEIXZkld4jPLQVAkI0LDBRj3/77p2v1i+VKuHflDRTD
+veFdEMGkKsQ+BeMcRSCCc/kcjLdGMAd4CkGIoGzxFvFelfBgtRqzfqkjWOK
WrQFs7wUV5JWXuBglOoIkWEkLEqBbodc5XCIyFYAsU3mqXQFFsPPWsuNqVnB
thQ9Kxlo5PzIpZVU4VA05fqjpi+T1mXQqekExRUiI2nHjLmY5hBJIcCRQQnD
A+Z+TolnpGIrn4YRFc12qDTKYMO0WiOJsORPMOI27ZpoTKD6Q5CnTPG9AhU5
x+gUxjj8ji8qHSW9qmi42D9sxqM9B7sIWUUlNZZcQXzp9THpQznOHYSbbeZz
Ug6NWgZhfZlBShLYKluXBmeSOXTci5axnSZAprxiMwX8EcbmOcGDgQTd8q7M
pZEt7dZM1cl1RJ/sFH7BnUR/rBUmL6i8CFO+FNNHlJ+BEr9TrmLEz5Q1xum7
VqkAD40mGlYssjIumvNQpU44vxGV8DKzBZvE0Rh/SVADRa1r6Z9//mcyp2W6
1/7+G0cX0+mxMbYbKGlgSMiocE01DjKaDSHD41olIEpsfFOR5hoerE2sEjdw
L67gAZ27g1EDz7PUCjRtjDYgOgtB9TTCJ/I8wFoDewZMqlhslqE8acotYLdL
2vGSvcs6G9poXSTLMWSpiSzDJlachtfoIUI0wALS5DZYSt2N9aig3I9DDUCJ
ILmuHbDXLmWOzhQzi1cLlBs4JI2mM5XWJnIgTLPV8Z5ws1KHv6XrAcsyLBcP
owtTmmkHUvC43pzMUNdElOWmCsKVInAnFZmdS6A6O7QXIlID/OFXZwYpMuth
CldKxW4oBMumycpOnp0wUF8sAoPy8KnFoy8qao34XAEAaTIaT+Dey/fz5BTH
IHmhVRkMo4NxSN8a7najzJMdkmZY2Mr8PbQRRrhb+zTU6ivSMRZiKe1epMgA
gAgRiK6DqoDaxgE34guocxuQmYjHkWtnyV35NNdEd5ns20aVloHy0OoMQeCB
7Mdf32wzNtzVCMZ52w2+UvAKqgkjpSIDx1pU7qYOkScoECE7Tu2nRGUt2hqw
AYjpy2Yf8QLNYnVi7FwwWb11YPfNWkdVaoxGXCFQYhbrldxaBmhSl5b0S2HN
UHQ0iLdFpygFT0LTo1ZhY10PII8EZaBkma7+2r0oqn0kzgAc4hDVJukbfCTl
Utyb0MxaE0e6lOl2LILnSsETCgbmF9HOh3Se9lgU0iVslE0qChDHsJglsnO9
pI1zzS862YAfolcye3OY9wkDrZg7qvPqQOsIFrITk+5WaXWBIPPBkF/lqZBS
SY2VzlkWcWwXohBURd8U2CRHhOSKGNAQZFWmiWCeJpjobKk7ys6OdI8OGnIO
2MTs1S17vRfc2ecVCiLDdOQgaqI7lKGBRpnBPmerCA2Qm3PgcdEpUyQ7HB5n
XeKGecsJeu6WgrEaM7MLjUYQTl2kv0vZYAzx/Er0PTRf071EDpx1nJy0wJ0Q
CM1GTLv33FxuhQ+LnZzD8XPGHCZTi8ZfYil6/ILHKaDGjfacZrNG1f4OmPwl
OvwxBkUphbwXgrxL+1Gq0CTHh9uZ9f5pMRqlqxxFspL7xVKBDWWc6EZHUndS
bkmd9CMi5GbfHZuhGosox+t3VvWKbFCMRTHv31/XWzTh7NpPosXbIFpSwIq8
1nY3Oj20gPRoiS6E9FhXndEYvFbpfRqSD50KLJOFcgoQgjzP8hYH1Lp3YWRu
B6IJnYqWFJ3JZI+pMgxX9jQl2vsMqBhdNujwdFHVS0z9wEq7FZLcXC7wlVTb
vA9ctUP/oUpE0+0Ob4pNq6H+scr++v2bv/7gn37m32J6PbIVilXbDyG9VIkh
vqncEhtMr2FohwT5QFLnSLz+1+/Z2/HXH45/V/yBP1SzkEIw8ESxOE36dj6I
FGL5bqW0Ak514Pg5D3RWAApFc5rLETjoQREwc3vwRfZHwhsb+iDfOGZvAJ9G
ydEA9ry61qiVp3XH73BgRS0Dx8utR2XLWOP5yoHpDFPAjMDKHhkq1EORnqsN
RfIVNyYnJLkobYXeV91U0jAQwp3cyOrFWpGiokz3KUBBWApAcLaryKuJcgl4
YIFN9L41Q1SpyyuLMUp18AvS6UHNzStKf8C4fF+mv1sqYbDExaOmkR/aBMp6
4lokIfVJSVOjoRpDDIsrAm0rrpwKzo2fOU2oiAqNr4ptA9CWYeviUDSXJZPF
9CBQ7qdsQixBQ4FLeZsHKdFQtfZjQxcsqMz5Yi0j9mN0HCUhaQxRVz5O5Wfg
SAm/qC3NVJt3M4e3KLTMRCfOabbSj6yR0I8BSDQcm7tHK5dVOfyiSGZPpNij
PgyVJ2xbEEUJ14P/pFB7/8QvuFlLlR72oHueR92SiuLYWuNUBuzMYKzfyPU+
vF8EuBnr1+7jctCAsk4LzXZVrMEshbLyRlfBWkWTokxBWaxm2TclClnKf3LF
FgopdIbepUINj5g/Q0dcaA6guKrIBlGldbbWcLabhAr0QUQUxtYe2jVcEkyy
WSiDSUhxM5dTEgPHGkXyEIuaZUA5aEG+ybg8mnvtzQm4Rdn6rhnH3UhOdJ30
HT/DIadQkRUp2rW9Rp5e2RGA2n8Jm9YGud+p7AdfhjPgRCF8wIlDxhtV5ZV7
9+NdNNeifahV20D0wTo4mRBFSqAMb/46Bihsw12lNXCtIHV7wmipFH2ZqBYk
K1iXDDo2x0X25T1yPQVbZXSm0S+X6pOL5S6OELj2vj7kUEa5HSnSjEv7Mw/3
2LHyC1y5nKL3K8cvEywfC3/RiyqnNNEcTsnPqqnHYoTRANVZD0S9VnL1+8Pn
Z6VHWUeoBFD7HaLYQgBZKvnEPUyHnOQkF46nhT2PNycwgrj/ZKYnNB3R1HIT
VRK6x0UH29UlLW5bc9fEMmuBM07JmpTTczosLpw4iZWjDHMp5uAYlkbK3Ivh
wKNOzAjRPxRzzx86/IiGiFHOwp7vpVlvNR6EINoZSS4Ucsnyu4JcZrOlrDvx
95gtoYrUij7h/cktKaYJKV7iWfknzrnU2bYYbIwNtEC7TT32OOzKVhD2l2rG
K92yifD10vfeHve2OZfwbkhd30zrLz7jJn4DHuyOKji6cmo6Hkc93NBM+aao
YqKMJ0h7I5JgTAX/Cs8Du8CinK5gCHWqYiF/Z+c4wufmnJyZstxRz+gaaeR+
CHLCR0W9raWPcY8U3eaXnCRzIw0qiufLDYUKtIWjOhNLaIW3BkMyBJgnrlCh
DrfySHqFNYsO1DZtxdV3YZpwd4y56cum/MfME6FaKwmJzVI7T2T06vVFzR/K
jgtzw+3DtyvZBI8dWcvf8uVCpa9pVaL5H2NXKmrGJhM4ImE5EGKPjdsCGlRG
cul7VUhPiUXCF43JgkEqS1x3vCMyvhQ4MiDNDS51EpXRU2Ae6s7rroAwOdSF
XYosscC8bS+wbp0B8pn9eNIvoxVmpkPuNCybdigLU8XTyiu0DGl0chBXZ7Jx
nNSSEk1KIsYlFpzl//69/Qbf4ODmymaGupmSjmqnIy5R8bDCyRWwMPm1m13b
Fc0PYdfY4Een8gkBopdFJdyUtazqt62Sa6tFpVVdXVFNiosFnsK5Lp2nqXBT
yziM3gVLCIjlk8lIVpzu40pkaimXqbZwZT/GiuCVO7cYdXU7LCp+0E5yrFLH
yIy4Fa0AnzyrwpmgFTYMihcdWniH2HUYYxOjvRSoXPlWoR3fihVhj9nCCaEK
seHrl2cvPz/VNghzO2oilOkqe5HnsUyKGaP+UVi7rlXU5U0peaYoLkpxRT4B
By5EhCMhW/CY2oAwiRiFWC2BbYgjUZa25hLKzTqJuQ13oUIYGAiYSbdJZGWk
8bqsrBRxhZN0dgERYG5UoZUGI0J2+OXkpl3cCZPy31iXSSUuxGGU15VmW769
ygmSqwrCrdLdm3VLe8gmEp452ZhQbomMQ+oWDDqyoltSqoG5MPSpatNdbMhO
fCJJF+z71HfYqTSsRXIXk4Oq2HubbptUOUuFPCNEWrGP7EMdvmYhVpfIy0wy
w+BwtrmsqgbtXNaAKHW0k6eDpHu5k+DFdAhuDS2ubtSViSogRzEqijYR0mCD
1jIQpZKkCv1yc3HJHkZsz3Lpo0vQgyAqgebFyL8stdgdNTQfEBAIRUWseVcH
+8ML5ygN+QoBb6GpGZp7LZvTOxZ1asE/lx1oq2bio/mEGFEkAKiiairjhUPK
TiscH95EKCk8YVZ4uRR3yxRykh1K5c/KzXlyF8XsubDglNMpzE0o7agKRSil
3FXlS9dysB1NQTp5veWRiz27QiG9WutYGBtG6Ye4iYAD/wyG7odMuDR3wdCM
VCbiG+W+ce7lDm0IEWD+QgVIgsvtYjsarQxwwtLZ7KonXyVfZcbJHG5+g5Oa
g3N4eN9CpHfM+atswlPa3L2HSIW9VQk55zKI6+S4skdUJJMZRonLuk+1fa2B
TMpy4MVCo4kcCyUaU+RDEcjUGW6B1sNSpSELBQgvPEGCRMcZiI6xcE0aNuH7
pw5/ZaFYT/gsqXyQvUIhkAwl3yPm5qVR1XWl6jkUtYFqsG+mMcqAj7hpDOWX
dVtJuUYPq/LCWwqz5XQirpNgyZRiaCQXYm5YoQTDdm0jUeObjlx++QLlxSZ+
cokcoCJIpGIlaOxoGJRxcjDQBF9nfGF5Rq21Wa3LRdWRJFS8jtqZsaDNsVLF
c6N+sORZDOpKFrJsq50BdXFTtfCplkDo1w5kAR/X/JdJbhYJGL0OuHMCMXVq
iyCq8x1l/LuL/gsgtQ5e3LVvh+ieV6m02JRiKBr/InvG2VWOLWvUD0PAfev3
L6R9eBhntom+CstczoGwBw3nyIY5hBtHRBuGQiLgOw6VvDWMU6kI7Ily/J02
/jeLLxHMsFOMZYKq6GKiUy0+eqtIvFFzenqo6K/QGHVfyR/69Xe1W3//NFK/
lCohDa9hWPSlEfuwQDA6kEgo1N8i9caoabywsKgexBtZJLocOdeq0DPgS3mw
VhksSBoNOYDj1QL3NV6jyYpFauYq4HdpVhh3llJ6UfAmdA4XiJZ+ZOUiRLKV
rlukysxo6bVQ0SoFA/XfzUUuhL6lBLZ0GtOFiYZ/3qkehPIxffzKaoJjrIK6
oC+4Evc3W81C7X7BKjJtaxLkZBHe8bA0YUXcKISlGahVEWYNrx+ZvAv2CZff
dsxlEdicFEqMHoQy5TrPycmpUv3VySM1US2fsi/VrTg0u+5KtsdlIK/ZlhtA
Tcf/ozT9yylNhQKmh6lNNPVve8vI81HdpTcNDgHBb08VbdMlbdjXpOwicJ6E
/6WKF9PkP1Hr4twnvjXuBR2vAqbMIQe15uERPx6+hgbnL0U5NM83JsKQDzFo
cbUhe//wJlP1/tH797tUHL4d/aksNMEtKBK0S6KqlFZNz1WUIwW5muhRDRGr
Ri7IV1WcTHHGhBtncSCH3BB6+TIjExFTHJQckV+G26rxw5eoliwWqahQl/vr
ZIS7hNaQWzfIJNTckpBGy967RCd1nAJt2EJY58eIZqeyc0WEGtQls85zrm9X
R6SwxApnO+taewrVAgIFrmT0jDopF9BQK0BkamIFkLi6WUOh5DT1sWUFyNZE
5LZw/VJxY4LL5Ja9t3jPoOQG5LFVJC9HoE00BN4/RTH59WIP6aq8538njgam
V8ShsCB37evHFZbMNie/Wtd5nMw1EWsv8bcoSH+J74ngP5G3Au6hon8AEZVO
9G9D3/rXPzyP0xU/qlb2ULqkuHqJHA0M/SO4mosgP9KB/ztDLht4luHfW9rr
nPiQ3WYQ2jlf4awX5vILP3oLKN12P8wH279jafZmtUtDJJ1BlOW6NKQgpg3E
V3UZFvIXYSA/mKtiLnGU+3eBaG6qsiU5YA0j4oU1RRwYvfoNjUmm7bkgphwr
HflDLZdj+ehapLJooQOjEZ/L3nSg89xE1zfLbdEJt6TcExDI5iUs1j4c4qo1
u33PhVYoRdJWjjFQsD7C5ZVI9sbmPW8olzahpscqi9u1YEw1UgoVhko1op4Z
d0jY9YqabvGqQTpDx+VDJCyXtbQPYFLVW0rnjtnpM2vuock5DPNctWaXaA7V
tTbGfeqGIpgYV/Kafdwj/DaIw2STLbc1X1KFs3Abt9tgOTonQPeVRGGkA+l4
i428Z44vOlCdGejON2o3uomyG7MzU2beRruv2sZRT0Pqd0GU5OmWC5bdiKG+
5UnsXnGSqt+LCy/2j9J+1h1175WCx2C3+/Bf1i+1O5b3WB1JtvaS12k+wfqo
J792rRfp1p8GphSW4kfG1urqnsyqoUWfOS/4MB4ltm38/VG1cj3sjla5BvwN
/2iK90X8DssadEaDq90eOm9ETqUg5lLYQBm9hRbSfBA4WYzMK9E99UCEUsLz
H2L+TRPzA6hsD+kbE2mHpcjHp+RxQwohB3yicrefINt9QllC8JnFG1UYrMUV
sLd8v0MWiiYuzvuTgL9zhWgQl3aCyysL1dk6UUrdJFto4+ti3rqnjjJA6FFe
tFTgzv81IkEUrfkYGvgvPQGCUSBm5SWnixC1A05FK+/ur/WgY3nOI2Fz1do+
Fi7HUcNLls+GL4d4kKgHlNBX3j+NgjjAIgz8Mcpkgz/RsgcIdC7dk5pcY7qD
XRU14zqogOiaFF/s8qtdqNR+vFqG9JS0VvRtli8u97znwWW49D/InjTq3nZP
9J/B//caHd/q7GK0KfqgaNTZ4ejea/TxOnGZVckFsTLnUr28I+vyXoOuFPdf
CDpCrt41qy9pcokjvOHw/lHLbLb9D0bxjXreqCrSixEl/790F0zocPNxkvIN
eIV5uPXRgybo+Tv79zxQ2fFws4ude0rv2r0BAO+4Mmcnogf5l7zGwHc0STrI
O71WyzfaBe2szqAjfS77gNnHWiS4LpL5Rt5gElxyTzFFdZztIE1bmfosIjj4
501yxx0/8UzfUukVkYzRgzNUZltMOR6Us8siFmu4uCZO9J1SRMu1DHRxHOX0
J1f5HXXzoQQoEVdB0xtvUhDJuZT+IJZK9+OtjEKfq2QTK0lJPZNxRXRv6fvX
s/Gg3hjc3wugRf8A3dURzG0gQX6w0WzDgxJraJMhIVLKP2J7CCIeb4Gm2+ze
P8WeetX5YoElbBfk3yLFtiTb8WmVrLQW9UfCNrOZCD7K+i+fE3wzsiI4Q3o/
eguI2SsF6Bo937xHTzLZPRdjitaliJXP/kAXb/m1+SXsljjN8tfjQ2Mat/O5
Aq7bKuZHOaaQ44ENUZgSdKzv/U/p/42Xxt9e+D/4P3gefviMxxhamR8/jtDM
9f7Ot4PK4VUJVHUVkoQsXltoIdvBsV1IEdzyR6n0PXw6Y7Yd1QUPnW4TG3NJ
BPGke5aoa8YeNs8hgvFzGAPB2QlMVp3fJMA5HnJdZAHvytY4BKh/YkZk9W6M
/5dfVOmJ96WdVlj9oT4r9PbrcP3jV1Rrffzg4Syx7RhHIEVZMMVd2SPEd0FV
GGyvQK/QVO8/lejTysC9ezQXaCzzXYvbx7P8jqwXN/low9t3DvxGx9vLMfxG
3yuebr/Z9jwHjcNcpckkvanfDrQHwn+f+b3is3ajJOPfZ36/WCTvaCkmn200
DjSeMwduDHaU35f/fea3Wp64Ndof4SUb5BZAe0t4COSd0FpRkD+AvAdGgnd0
UQpstiIfwuZSFifhS5uYbELQN6j1ayTafknVReRwqBFRvRI3AOimunrm6Xhy
PkQFa93sdNMGpi/zRbweNfwcTT8/e+l/9frsm+HF1P9y+h196704+/yL4fV0
+GL04vPR9ufPz1+0B/D35+Ox+Hw3/WL0ef0uuDsbDf/0p+vh+i/f/fSX8def
P3/RqX8zGnvjn747z//8aX3w0+erePvHr9L15PnFu5Ob6M+vbl4PX46Hw/Pp
Mpmi6fzzz4M/3nzzNgp7L5PV7c8/P++/zm+9rz69jPJvv53fLG6H6UV29eWb
PBt/N3179+XLPH35xZ+jwatR6+Wnd/Hw6zx7t3rdbL1o519G3/Kypi8n5UXR
ll3cFPuRrzeXcOAor9sMEGAGj2qllGmEO7D39ej52dhA3uzN3fTuuy++TP5y
9u6n+nj4p+/OxOfJ8E/zCaBrevPHYPT5z+3nP/98e/7dN/Pv4s274I9p9+fo
ZHrpXb47WbXTb5bx2Z8v776s977Yrp9fDlejF/PxT5fBu9eN9u3F9eLdVfbH
u9nzyxedN4v83avn58ny+rPPjPUXwKLlk/tPOm+pF835F0OgDHlBqcjLlUQo
ctDF8/VTp/tBFNIaYxZomGqjJSMz268s4Htn6TN8L6vUFtZMzrQusSUntqb5
40VwjRXFJ36j3jtCGXni72hwdeI3T/3f/97/nhi0+oBvMEKq6k5Q4L6n8HW1
0UVlgXF3Uik+frkFawefu3k2bM5mo85gOpg1hs3BpFkfzbqdzmjcmEwH9cF4
1JtOJoNec9gd1weTTn02bjcH/Vav1+/26r1GZ/qMxv7B/8MfKhK6E30ZacNY
Zf9Igy1Mv5CAhVfeKx3oxDfXgu+d+tUe/Hd6TmsRD96rCfGVTWwN+P5e/yTq
hvFrvEha/6AapQk8dOrdWaPb7k1bw8G0Puu0h/XerFVvtdutWas1bY1nw2a/
A/iZNqaD1rjd7Y0n/VGjPei0p+1ufdytt4e9brM1a7S7k36rNerO6sNmu9Ou
Dzr9TqfTg3fg+X6nV693u7Nhr91r1nu9VqM17dfHEo/HsC5P4/NE0+WJ3zrV
qNI/VGUfC0JVo1L8WcYwquw6Y2Kqy8dEO1F7cKIUU5zS0OYeGdKefI6FB6wB
lOClh743HvL9Z7oYB+XbM+PHH9Tne7nnevOMMnxajx71+2eN+jP5Lv9X04qB
FktfOfE7eoxnqg2PAdMPcgDhfDjxB6fFk2jKcQeCmhWJdvtxV3NaWFS9YmHc
6KhHEFRBNtFzsHHPgF/49TowkmdlVOmJFOjNVgWVLVqXgRu3XgaQd37FUhsf
ZalG80BFo9/bZPZLGKD1isEEm9PpdNwejqfjfq83nTZacLI7zcmo0R23W4P6
eNCadib99mwymDU7w+lwCqyvN+p3G6NpHd5rarr9weBLrrXQtfaAoTYc1UHd
/eQmjRArcFie3OT5+vTkREivGqD6xD4xT/ZtOAcxcaiK3zQPj+s+dUCvkyqk
qo379O9OB/VZvTkezrqT1rTbGDTrk1Z3NGuNp8PerN9tDhut0ag/GzVmIBhb
s/a4ORg1mo3ZdDjq9aczIBqbDlxsa6/BceL3cAtcGHMYEoDfBrGUfzwLmnNm
O0l1YD9oBLivgdvLjzi7C8ewCM9jju2BkcoqcZLT7ejvqBpBRWwotoWKRvHi
nOTyJ5jg1G/1hB006XdHw2a92en3Wn3432a732zO4L/1w8qPt1/76fTbw0mz
DzrCsFFvNLvDOgzQb9dZm/Aeo054j9EnvPG03ur0Z4Nhrw6A1Zv1Ov7dGAMe
Gggq/n+/0Z52210YoNvp0qfutNduTr1eq9fpDnrterOPDzVhzHq9U3p8AP/b
a07V04NOsw9gj+v1RnvYaPTag26rC/9p1mHdAAIO0+jBGQPcd3p90HrqDXiy
hZDxnni4Kb+WGXuSG9enjT6gFaZoNrp9wEu7V2/BVjdhb2DnGt0JLGHc7TSn
AB8cdvi+7ZXRINfV6CDsddgHALvVnwqwGwWwfy3v8CTzqCNqRrBREoFAqkCW
dcQz/O8EoBn3AOsC+DpuuNcDOkAMA9gwNawNHgYaaNZn2p505FoeyStJKJ+Q
xEy2X84c/6atmI/DuP/1rZgJEFFrOmzAGWk0W0A+wBlmw8kUaL8+aA96jcZ4
Nq13ppNmq4mHe9JrTRpwjkajyQCOT2fcaYIRVG+P2p1xG54bdEdAWk1AUXsw
ak564+60NWqO66M28JP6aDKZjSbN3nA2gD8as/7ot2bF7LMT6h/HTrBtl19i
J3w0xf9RWv+D9LtHKgg34XKZ4MVvy8U/UyMAjfuQRnCYkXj7OckujYBPpveY
o+k95mx6/REKrDboMlojaPcASCnk604hT8LQM6V8G4SvEPBdU8CjaAcZ2RS/
Ntujbh9eH3sgrmaomnRnvSZ8bmvpZDjv4NS72oNsP5Jv7hNfR/csn91vV6Z1
W4PGeDRudUEnHA1AGRqOW6ATtRugCjXbk+Fo0p+0xoPZtDmZTmfTBuB6MJyN
W+3BtDeZjJr/LjKt0+g1O0ilU1hhbzYbTGadxmAM/+11h204Wf3uZDYddTuj
Tr0zafTrk96kN2jPpuMuaICt2bA+HfSnIxBt3dloPADVE9TK4ag9BeV/2m+0
YAwgzw5odaBNjuD5Ph4qUNF7oHb2Gt3fmkz7j2fuP565/3jm/tmeuaf/Dn64
/31eJXyjtHenaDk9QiV8jEb4z7PVfr06+Bht0KUMPnu0Zg8Kgec9+HHDCGi5
dvyw5uXtV712bTmrMt5jdBnvMcqMB/QCuz4a/Vbdgu32398tCPTX2kfTpr8P
tqo/RIB+qWMO/XKe2zF3aH7Yn+mk7z2GHXmP4UfeYxiS9xiO5D2GJXmP4Une
Dgv1/wMU7+mDRdYAAA==

-->

</rfc>

